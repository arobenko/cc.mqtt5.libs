/// @mainpage MQTT5 Client Library
/// @tableofcontents
/// @section cc_mqtt5_client_overview Overview
/// The <b>MQTT5 Client Library</b> from the <a href="https://commschamp.github.io/">CommsChampion Ecosystem</a>
/// provides simple, asynchronous, non-blocking,
/// and easy to use interface to operate MQTT5 client. The library doesn't
/// make any assumption on the system it is running on, as well as on the type
/// of I/O link being used to communicate its data to the MQTT5 capable broker.
///
/// It is a responsibility of the calling application to manage network connectivity
/// as well as measure time required for the correct operation of the MQTT5 protocol.
///
/// @section cc_mqtt5_client_header Header
/// To use this <b>MQTT5 Client Library</b> use the following include statement:
/// @code
/// #include "cc_mqtt5_client/client.h"
/// @endcode
///
/// @section cc_mqtt5_client_allocation Client Allocation
/// The library supports multiple independent MQTT5 client sessions. The
/// allocation of data structures relevant to a single client is performed
/// using cc_mqtt5_client_new() function.
/// @code
/// CC_Mqtt5ClientHandle client = cc_mqtt5_client_new();
/// @endcode
/// All other functions are client specific, the receive the returned handle
/// as their first parameter.
///
/// When work with allocated client is complete, it must be freed using
/// cc_mqtt5_client_free() function.
/// @code
/// cc_mqtt5_client_free(client);
/// @endcode
///
/// When working with C++ it is advised to use a smart pointer with a custom deleter.
/// @code
/// struct MyDeleter
/// {
///     void operator()(CC_Mqtt5Client* ptr)
///     {
///         ::cc_mqtt5_client_free(ptr);
///     }
/// };
///
/// using MyClientPtr = std::unique_ptr<CC_Mqtt5Client, MyDeleter>;
///
/// MyClientPtr clientPtr(::cc_mqtt5_client_new());
/// CC_Mqtt5ClientHandle client = clientPtr.get();
/// @endcode
///
/// @section cc_mqtt5_client_callbacks "Must Have" Callbacks Registration
/// In order to properly function the library requires setting several callbacks.
///
/// @subsection cc_mqtt5_client_callbacks_send_data Sending Data To Broker
/// To client application must assign a callback for the library to be able to send
/// binary data out to the connected broker.
/// @code
/// void my_send_data_cb(void* data, const unsigned char* buf, unsigned bufLen)
/// {
///     ... /* send requested buffer to the broker */
/// }
///
/// cc_mqtt5_client_set_send_output_data_callback(client, &my_send_data_cb, data);
/// @endcode
/// See also the documentation of the @ref CC_Mqtt5SendOutputDataCb callback function definition.
///
/// @subsection cc_mqtt5_client_callbacks_broker_disconnect Reporting Unsolicited Broker Disconnection
/// The client application must assign a callback for the library to report
/// discovered broker disconnection.
/// @code
/// void my_broker_disconnected_cb(void* data, const CC_Mqtt5DisconnectInfo* info)
/// {
///     ... /* handle broker disconnection */
///     if (info != NULL) {
///         ... /* Access disconnection report details */
///     }
/// }
///
/// cc_mqtt5_client_set_broker_disconnect_report_callback(client, &my_broker_disconnected_cb, data);
/// @endcode
/// See also the documentation of the @ref CC_Mqtt5BrokerDisconnectReportCb callback function definition.
///
/// @subsection cc_mqtt5_client_callbacks_message Reporting Received Message
/// The client application must assign a callback for the library to report
/// messages received from the broker.
/// @code
/// void my_message_received_cb(void* data, const CC_Mqtt5MessageInfo* info)
/// {
///     ... /* handle the received message */
/// }
///
/// cc_mqtt5_client_set_message_received_report_callback(client, &my_message_received_cb, data);
/// @endcode
/// See also the documentation of the @ref CC_Mqtt5MessageReceivedReportCb callback function definition.
///
/// @section cc_mqtt5_client_time Time Measurement
/// For the correct operation of the MQTT5 client side of the protocol, the library
/// requires an ability to measure time. This responsibility is delegated to the
/// application.
///
/// The easiest (although not very efficient or very precise) method is to periodically (say every 20ms - 50ms)
/// call the @b cc_mqtt5_client_tick() function reporting the amount of elapsed milliseconds:
/// @code
/// cc_mqtt5_client_tick(client, 50U);
/// @endcode
/// The library will check if some inner timer has expired and may initiate some
/// response via invocation one of the registered callbacks.
///
/// Another (recommended) method is to register a callback so the library
/// may request the time measurement from the application, and when the
/// requested time expires, the application is expected to call the
/// @b cc_mqtt5_client_tick() function reporting amount of elapsed milliseconds.
/// @code
/// void my_tick_program_cb(void* data, unsigned ms)
/// {
///     ... /* program timer to expire in "ms" milliseconds and invoke cc_mqtt5_client_tick() when it does. */
/// }
///
/// cc_mqtt5_client_set_next_tick_program_callback(client, &my_tick_program_cb, data);
/// @endcode
/// See also the documentation of the @ref CC_Mqtt5NextTickProgramCb callback function definition.
///
/// In case of callback approach for time measurement is chosen, another callback function
/// (in addition to the @b cc_mqtt5_client_set_next_tick_program_callback()) to
/// allow interruption of the previously programmed tick wait must also to be registered.
/// @code
/// unsigned my_cancel_tick_program_cb(void* data)
/// {
///     ...
///     return ... /* return amount of elapsed milliseconds since last tick program */
/// }
/// @endcode
/// See also the documentation of the @ref CC_Mqtt5CancelNextTickWaitCb callback function definition.
///
/// Usually the callbacks of canceling the previously programmed tick and programming a new one
/// will be invoked as a side effect of other events, like report of the incoming data or
/// client requesting to perform one of the available operations.
///
/// @section cc_mqtt5_client_log Error Logging
/// Sometimes the library may exhibit unexpected behaviour, like rejecting some of the parameters.
/// To allow getting extra guidance information of what went wrong it is possible to register
/// optional error logging callback.
/// @code
/// void my_error_log_cb(void* data, const char* msg)
/// {
///     printf("ERROR: %s\n", msg);
/// }
///
/// cc_mqtt5_client_set_error_log_callback(client, &my_error_log_cb, data);
/// @endcode
/// See also the documentation of the @ref CC_Mqtt5ErrorLogCb callback function definition.
///
/// @section cc_mqtt5_client_init Client (Re)Initialization
/// After all the necessary callbacks have been set, it is necessary for the application to
/// invoke @b cc_mqtt5_client_init() function to allow all other subsequent operations.
/// The function checks that all the necessary callbacks have been set and reinitializes internal
/// data structures.
/// @code
/// CC_Mqtt5ErrorCode ec = cc_mqtt5_client_init(client);
/// if (ec != CC_Mqtt5ErrorCode_Success) {
///     ... /* Something is wrong, not all callbacks are set */
/// }
/// @endcode
///
/// Also when broker disconnection is @ref cc_mqtt5_client_callbacks_broker_disconnect "reported",
/// it is necessary to perform re-initialization of the library to be able to re-connect
/// to the broker and continue operation.
///
/// @b IMPORTANT: According to the MQTT5 specification, when broker disconnection is reported, the
/// client needs to close network connection. It is a responsibility of the application to do so.
///
/// In other words, after the broker disconnection is reported the application is responsible to
/// perform the following steps:
/// @li Close the existing network connection.
/// @li Re-establish new network connection to the broker.
/// @li Re-initialize the client library by invoking @b cc_mqtt5_client_init() function.
///
/// All previously registered callbacks configuration persists and doesn't need to be
/// performed between the re-initialization requests.
///
/// To check whether the client has gone through the initialization procedure or still
/// needs to be (re)-initialized, the @b cc_mqtt5_client_is_initialized() function
/// can be used.
/// @code
/// if (!cc_mqtt5_client_is_initialized(client)) {
///     CC_Mqtt5ErrorCode ec = cc_mqtt5_client_init(client);
///     ...
/// }
/// @endcode
///
/// @section cc_mqtt5_client_data Reporting Incoming Data
/// It is the responsibility of the application to receive data from the broker
/// and report it to the library. The report is performed using the
/// @b cc_mqtt5_client_process_data() function.
/// @code
/// uint8_t buf[MAX_BUF_SIZE];
/// ... // Receive data into buffer
/// unsigned bufLen = ...; // Amount of received bytes in the buffer.
/// unsigned consumed = cc_mqtt5_client_process_data(client, buf, bufLen);
/// ... // Remove the first "consumed" bytes from the buffer and retain the rest
///     // until the new data chunk arrives.
/// @endcode
/// The application is responsible to maintain the input buffer. The
/// value returned from the @b cc_mqtt5_client_process_data() function reports
/// amount of consumed bytes. In case not all of the reported bytes were consumed
/// the application is responsible to keep them and report again with new appended
/// data when such arrives.
///
/// When new data chunk is reported the library may invoke several callbacks,
/// such as reporting received message, sending new data out, as well as canceling
/// the old and programming new tick timeout.
///
/// @section cc_mqtt5_client_concepts Operating Concepts
/// The library abstracts away multiple MQTT5 protocol based "operations". Every such operation
/// has multiple stages:
/// @li @b prepare - The operation is "allocated" and relevant handle is returned.
/// @li @b configure - Apply one or multiple configurations to the prepared operation.
/// @li @b send - Send the configured operation message to the broker.
///
/// During the @b send stage the application is expected to provide the callback to
/// report to the application when the operation is complete. The first parameter
/// of the callback is always "status" of the @ref CC_Mqtt5AsyncOpStatus type. It
/// indicates whether the operation was successfully complete. In addition to the
/// status it reports some extra information reported by the broker. The information
/// from the broker is available <b>if and only if</b> the status is
/// @ref CC_Mqtt5AsyncOpStatus_Complete.
///
/// The @b send stage function also returns @ref CC_Mqtt5ErrorCode value to indicate
/// whether the @b send was successfully performed. The provided callback will
/// be invoked <b>if and only if</b> the @b send returns @ref CC_Mqtt5ErrorCode_Success.
///
/// After the @b send stage the handle returned in the @b prepare stage can be discarded
/// (no explicit de-allocation is needed / supported) regardless of the return code.
/// After successful @b send the handle still remains valid until the callback invocation and can be used
/// to @b cancel the operation. Note that in case the appropriate message has already be
/// @b sent to the broker, cancelling the outstanding operation can be dangerous. When
/// broker sends a response and client is not expecting it any more, unexpected
/// behaviour (like treating the unexpected message as "protocol error" and disconnecting
/// from the broker) may happen.
///
/// In case something went wrong during the @b configure stage, it is possible to de-allocate
/// the prepared operation using the @b cancel request. After performing the @b cancel
/// stage the allocated handle is not longer valid.
///
/// @section cc_mqtt5_client_response_timeout Default Response Timeout
/// After sending any operation request to the broker, the client library has to allow
/// some time for the broker to process the request. If it takes too much time, the
/// client must report that operation has failed via the set callback. By default the client
/// library allows 2 seconds for such response to arrive. Changing this default value
/// is possible using the @b cc_mqtt5_client_set_default_response_timeout() function,
/// and retrieving of the currently configured value can be done using the
/// @b cc_mqtt5_client_get_default_response_timeout() function.
/// @code
/// CC_Mqtt5ErrorCode ec = cc_mqtt5_client_set_default_response_timeout(client, 3000 /* in ms */);
/// if (ec != CC_Mqtt5ErrorCode_Success) {
///     ... /* Something went wrong */
/// }
/// @endcode
///
/// @section cc_mqtt5_client_connect Connecting to Broker
/// To connect to broker use "connect" operation.
///
/// @subsection cc_mqtt5_client_connect_prepare Preparing "Connect" Operation.
/// @code
/// CC_Mqtt5ErrorCode ec = CC_Mqtt5ErrorCode_Success;
/// CC_Mqtt5ConnectHandle connect = cc_mqtt5_client_connect_prepare(client, &ec);
/// if (connect == NULL) {
///     printf("ERROR: Connect failed with ec=%d\n", ec);
/// }
/// @endcode
///
/// @subsection cc_mqtt5_client_connect_response_timeout Configuring "Connect" Response Timeout
/// When created the "connect" operation inherits the @ref cc_mqtt5_client_response_timeout
/// configuration. It can be changed for the allocated operation using the
/// @b cc_mqtt5_client_connect_set_response_timeout() function.
/// @code
/// ec = cc_mqtt5_client_connect_set_response_timeout(connect, 1000);
/// if (ec != CC_Mqtt5ErrorCode_Success) {
///     ... /* Something went wrong */
/// }
/// @endcode
/// To retrieve the configured response timeout use the @b cc_mqtt5_client_connect_get_response_timeout() function.
///
/// @subsection cc_mqtt5_client_connect_basic Basic Configuration of "Connect" Operation
/// The "basic" configuration means no extra MQTT5 properties assigned to the message.
/// @code
/// CC_Mqtt5ConnectBasicConfig basicConfig;
///
/// // Assign default values to the "basicConfig"
/// cc_mqtt5_client_connect_init_config_basic(&basicConfig);
///
/// // Update the values if needed:
/// basicConfig.m_clientId = "some_client";
/// basicConfig.m_cleanStart = true;
///
/// // Perform the configuration
/// ec = cc_mqtt5_client_connect_config_basic(connect, &basicConfig);
/// if (ec != CC_Mqtt5ErrorCode_Success) {
///     printf("ERROR: Basic configuration failed with ec=%d\n", ec);
///     ...
/// }
/// @endcode
///
/// **IMPORTANT**: MQTT5 specification allows reconnection to the broker while
/// requesting previous session restoration (via "clean start" bit). To prevent
/// potential errors of the client and broker inner states being out of sync, the
/// @b first "connect" operation requires setting the @ref CC_Mqtt5ConnectBasicConfig::m_cleanStart
/// value to @b true. Otherwise the @ref CC_Mqtt5ErrorCode_BadParam error code
/// will be returned. Any subsequent reconnection attempts will allow
/// setting the value to @b false.
///
/// See also documentation of the @ref CC_Mqtt5ConnectBasicConfig structure.
///
/// @subsection cc_mqtt5_client_connect_will Will Configuration
/// @code
/// CC_Mqtt5ConnectWillConfig willConfig;
///
/// // Assign default values to the configuration
/// cc_mqtt5_client_connect_init_config_will(&willConfig);
///
/// // Update values if needed
/// willConfig.m_topic = "some/topic";
/// willConfig.m_data = ...;
/// willConfig.m_dataLen = ...;
/// ...
///
/// // Perform the configuration
/// ec = cc_mqtt5_client_connect_config_will(connect, &willConfig);
/// if (ec != CC_Mqtt5ErrorCode_Success) {
///     printf("ERROR: Will configuration failed with ec=%d\n", ec);
///     ...
/// }
/// @endcode
/// See also documentation of the @ref CC_Mqtt5ConnectWillConfig structure.
///
/// @b IMPORTANT: The @b cc_mqtt5_client_connect_config_will() function
/// mustn't be called more than once for a single "connect" operation. Otherwise
/// it may result in setting multiple will properties of the same type, which
/// is the "Protocol Error" according to the MQTT5 specification.
///
/// The MQTT5 specification allows adding several "User Properties" specific to
/// the will. The library allows such assignment using multiple invocations of
/// the @b cc_mqtt5_client_connect_add_will_user_prop() function.
/// @code
/// CC_Mqtt5UserProp prop;
/// prop.m_key = "some_key";
/// prop.m_value = "some_value";
/// ec = cc_mqtt5_client_connect_add_will_user_prop(connect, &prop);
/// if (ec != CC_Mqtt5ErrorCode_Success) {
///     printf("ERROR: Will user property configuration failed with ec=%d\n", ec);
///     ...
/// }
/// @endcode
/// See also documentation of the @ref CC_Mqtt5UserProp structure.
///
/// @subsection cc_mqtt5_client_connect_extra Extra Properties Configuration
/// To add extra MQTT5 specific properties to the connection request use
/// @b cc_mqtt5_client_connect_config_extra() function.
/// @code
/// CC_Mqtt5ConnectExtraConfig extraConfig;
///
/// // Initialize the configuration structure to the default values
/// cc_mqtt5_client_connect_init_config_extra(&extraConfig);
///
/// // Assign necessary properties:
/// extraConfig.m_sessionExpiryInterval = 5;
/// extraConfig.m_topicAliasMaximum = 20;
///
/// // Perform the configuration
/// ec = cc_mqtt5_client_connect_config_extra(connect, &extraConfig);
/// if (ec != CC_Mqtt5ErrorCode_Success) {
///     printf("ERROR: Extra properties configuration failed with ec=%d\n", ec);
///     ...
/// }
/// @endcode
/// See also documentation of the @ref CC_Mqtt5ConnectExtraConfig structure.
///
/// @b IMPORTANT: The @b cc_mqtt5_client_connect_config_extra() function
/// mustn't be called more than once for a single "connect" operation. Otherwise
/// it may result in setting multiple properties of the same type, which
/// is the "Protocol Error" according to the MQTT5 specification.
///
/// @subsection cc_mqtt5_client_connect_auth Extended Authentication Handshake Configuration
/// In case the extended authentication handshake is needed use @b cc_mqtt5_client_connect_config_auth() function.
/// @code
/// CC_Mqtt5AuthErrorCode my_auth_handshake_cb(void* data, const CC_Mqtt5AuthInfo* authInfoIn, CC_Mqtt5AuthInfo* authInfoOut)
/// {
///     ... // Analyse authInfoIn
///     ... // Populate authInfoOut
///     if (auth_failed) {
///         return CC_Mqtt5AuthErrorCode_Disconnect; // terminate handshake with error
///     }
///
///     return CC_Mqtt5AuthErrorCode_Continue; // continue handshake
/// }
///
/// CC_Mqtt5AuthConfig authConfig;
///
/// // Initialize the configuration structure to the default values
/// cc_mqtt5_client_connect_init_config_auth(&authConfig);
///
/// // Assign all the necessary values
/// authConfig.m_authMethod = "some_method"
/// authConfig.m_authData = ...;
/// authConfig.m_authDataLen = ...;
/// authConfig.m_authCb = &my_auth_handshake_cb;
/// authConfig.m_authCbData = ...;
///
/// // Perform the configuration
/// ec = cc_mqtt5_client_connect_config_auth(connect, &authConfig);
/// if (ec != CC_Mqtt5ErrorCode_Success) {
///     printf("ERROR: Authentication handshake configuration failed with ec=%d\n", ec);
///     ...
/// }
/// @endcode
/// During the "connect" operation, both client and the broker can exchange multiple
/// @b AUTH messages. When such message arrive the library will invoke provided
/// handshake callback. The responsibility of the callback is to analyze the
/// incoming authentication data and populate the response information. The client
/// can fail the handshake by returning the @ref CC_Mqtt5AuthErrorCode_Disconnect instead
/// of the @ref CC_Mqtt5AuthErrorCode_Continue.
///
/// @b IMPORTANT: The @b cc_mqtt5_client_connect_config_auth() function
/// mustn't be called more than once for a single "connect" operation. Otherwise
/// it may result in setting multiple properties of the same type, which
/// is the "Protocol Error" according to the MQTT5 specification.
///
/// @subsection cc_mqtt5_client_connect_user_prop Adding "User Properties"
/// The MQTT5 specification allows attaching any number of the "User Properties" to
/// the @b CONNECT message. The library allows such assignment using multiple invocations of
/// the @b cc_mqtt5_client_connect_add_user_prop() function.
/// @code
/// CC_Mqtt5UserProp prop;
/// prop.m_key = "some_key";
/// prop.m_value = "some_value";
/// ec = cc_mqtt5_client_connect_add_user_prop(connect, &prop);
/// if (ec != CC_Mqtt5ErrorCode_Success) {
///     printf("ERROR: User property configuration failed with ec=%d\n", ec);
///     ...
/// }
/// @endcode
/// See also documentation of the @ref CC_Mqtt5UserProp structure.
///
/// @subsection cc_mqtt5_client_connect_send Sending Connection Request
/// When all the necessary configuration is performed for the allocated "connect"
/// operation it can actually be sent to the broker. To initiate sending
/// use the @b cc_mqtt5_client_connect_send() function.
/// @code
/// void my_connect_complete_cb(void* data, CC_Mqtt5AsyncOpStatus status, const CC_Mqtt5ConnectResponse* response)
/// {
///     if (status != CC_Mqtt5AsyncOpStatus_Complete) {
///         printf("ERROR: The connection operation has failed with status=%d\n", status);
///         ... // handle error.
///         return;
///     }
///
///     // "response" is not NULL when status is CC_Mqtt5AsyncOpStatus_Complete.
///     assert(response != NULL);
///     ... // Analyze response values.
/// }
///
/// ec = cc_mqtt5_client_connect_send(connect, &my_connect_complete_cb, data);
/// if (ec != CC_Mqtt5ErrorCode_Success) {
///     printf("ERROR: Failed to send connect request with ec=%d\n", ec);
///     ...
/// }
/// @endcode
/// The provided callback will be invoked when the "connect" operation is complete
/// <b> if and only if</b> the function returns @ref CC_Mqtt5ErrorCode_Success.
///
/// The handle returned by the @b cc_mqtt5_client_connect_prepare() function
/// can be discarded (there is not free / de-allocation) right after the
/// @b cc_mqtt5_client_connect_send() invocation
/// regardless of the returned error code. However, the handle remains valid until
/// the callback is called (in case the @ref CC_Mqtt5ErrorCode_Success was returned).
/// The valid handle can be used to @ref cc_mqtt5_client_connect_cancel "cancel"
/// the operation before the completion callback is invoked.
///
/// When the "connect" operation completion callback is invoked the reported
/// response information is present <b>if and only if</b> the "status" is
/// @ref CC_Mqtt5AsyncOpStatus_Complete.
///
/// @b IMPORTANT: The @ref CC_Mqtt5ConnectResponse "response" information from
/// the broker may report that some features on the broker side are disabled.
/// The library will reject any subsequent operation configuration which contradict
/// the broker's capabilities. For example, attempt to subscribe to the topic
/// containing wildcards, when the reported @ref CC_Mqtt5ConnectResponse::m_wildcardSubAvailable
/// is @b false, will be rejected with @ref CC_Mqtt5ErrorCode_BadParam.
///
/// Quote from the MQTT5 specification:
/// @code
/// If a Server sends a CONNACK packet containing a Reason code of 128 or greater
/// it MUST then close the Network Connection [MQTT-3.2.2-7]
/// @endcode
/// When the callback reporting the connection status is invoked, it is responsibility
/// of the application to check the @ref CC_Mqtt5ConnectResponse::m_reasonCode value.
/// If it's @ref CC_Mqtt5ReasonCode_UnspecifiedError or greater, the application
/// is responsible to close the network connection and go through the
/// @ref cc_mqtt5_client_init "re-initialization" process.
///
/// @subsection cc_mqtt5_client_connect_cancel Cancel the "Connect" Operation.
/// While the handle returned by the @b cc_mqtt5_client_connect_prepare() is still
/// valid it is possible to cancel / discard the operation.
/// @code
/// ec = cc_mqtt5_client_connect_cancel(connect);
/// if (ec != CC_Mqtt5ErrorCode_Success) {
///     printf("ERROR: Failed to cancel connect with ec=%d\n", ec);
///     ...
/// }
/// @endcode
///
/// @subsection cc_mqtt5_client_connect_check Check The Library Remains Connected
/// At any time it is possible to check the internal state of the library of
/// whether it's properly connected to the broker.
/// @code
/// bool isConnected = cc_mqtt5_client_is_connected(client);
/// @endcode
