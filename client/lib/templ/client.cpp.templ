//
// Copyright 2023 - 2024 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include "##NAME##client.h"
#include "ClientAllocator.h"
#include "ExtConfig.h"

struct CC_Mqtt5Client {};
struct CC_Mqtt5Connect {};
struct CC_Mqtt5Disconnect {};
struct CC_Mqtt5Subscribe {};
struct CC_Mqtt5Unsubscribe {};
struct CC_Mqtt5Publish {};
struct CC_Mqtt5Reauth {};

namespace
{

cc_mqtt5_client::ClientAllocator& getClientAllocator()
{
    static cc_mqtt5_client::ClientAllocator Allocator;
    return Allocator;
}

inline cc_mqtt5_client::ClientImpl* clientFromHandle(CC_Mqtt5ClientHandle handle)
{
    return reinterpret_cast<cc_mqtt5_client::ClientImpl*>(handle);
}

inline CC_Mqtt5ClientHandle handleFromClient(cc_mqtt5_client::ClientImpl* client)
{
    return reinterpret_cast<CC_Mqtt5ClientHandle>(client);
}

inline cc_mqtt5_client::op::ConnectOp* connectOpFromHandle(CC_Mqtt5ConnectHandle handle)
{
    return reinterpret_cast<cc_mqtt5_client::op::ConnectOp*>(handle);
}

inline CC_Mqtt5ConnectHandle handleFromConnectOp(cc_mqtt5_client::op::ConnectOp* op)
{
    return reinterpret_cast<CC_Mqtt5ConnectHandle>(op);
}

inline cc_mqtt5_client::op::DisconnectOp* disconnectOpFromHandle(CC_Mqtt5DisconnectHandle handle)
{
    return reinterpret_cast<cc_mqtt5_client::op::DisconnectOp*>(handle);
}

inline CC_Mqtt5DisconnectHandle handleFromDisconnectOp(cc_mqtt5_client::op::DisconnectOp* op)
{
    return reinterpret_cast<CC_Mqtt5DisconnectHandle>(op);
}

inline cc_mqtt5_client::op::SubscribeOp* subscribeOpFromHandle(CC_Mqtt5SubscribeHandle handle)
{
    return reinterpret_cast<cc_mqtt5_client::op::SubscribeOp*>(handle);
}

inline CC_Mqtt5SubscribeHandle handleFromSubscribeOp(cc_mqtt5_client::op::SubscribeOp* op)
{
    return reinterpret_cast<CC_Mqtt5SubscribeHandle>(op);
}

inline cc_mqtt5_client::op::UnsubscribeOp* unsubscribeOpFromHandle(CC_Mqtt5UnsubscribeHandle handle)
{
    return reinterpret_cast<cc_mqtt5_client::op::UnsubscribeOp*>(handle);
}

inline CC_Mqtt5UnsubscribeHandle handleFromUnsubscribeOp(cc_mqtt5_client::op::UnsubscribeOp* op)
{
    return reinterpret_cast<CC_Mqtt5UnsubscribeHandle>(op);
}

inline cc_mqtt5_client::op::SendOp* sendOpFromHandle(CC_Mqtt5PublishHandle handle)
{
    return reinterpret_cast<cc_mqtt5_client::op::SendOp*>(handle);
}

inline CC_Mqtt5PublishHandle handleFromSendOp(cc_mqtt5_client::op::SendOp* op)
{
    return reinterpret_cast<CC_Mqtt5PublishHandle>(op);
}

inline cc_mqtt5_client::op::ReauthOp* reauthOpFromHandle(CC_Mqtt5ReauthHandle handle)
{
    return reinterpret_cast<cc_mqtt5_client::op::ReauthOp*>(handle);
}

inline CC_Mqtt5ReauthHandle handleFromReauthOp(cc_mqtt5_client::op::ReauthOp* op)
{
    return reinterpret_cast<CC_Mqtt5ReauthHandle>(op);
}

} // namespace

CC_Mqtt5ClientHandle cc_mqtt5_##NAME##client_alloc()
{
    auto client = getClientAllocator().alloc();
    return handleFromClient(client.release());    
}

void cc_mqtt5_##NAME##client_free(CC_Mqtt5ClientHandle handle)
{
    getClientAllocator().free(clientFromHandle(handle));
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_init(CC_Mqtt5ClientHandle handle)
{
    return clientFromHandle(handle)->init();
}

bool cc_mqtt5_##NAME##client_is_initialized(CC_Mqtt5ClientHandle handle)
{
    if (handle == nullptr) {
        return false;
    }

    return clientFromHandle(handle)->sessionState().m_initialized;
}

void cc_mqtt5_##NAME##client_tick(CC_Mqtt5ClientHandle handle, unsigned ms)
{
    clientFromHandle(handle)->tick(ms);
}

unsigned cc_mqtt5_##NAME##client_process_data(CC_Mqtt5ClientHandle handle, const unsigned char* buf, unsigned bufLen)
{
    COMMS_ASSERT(handle != nullptr);
    return clientFromHandle(handle)->processData(buf, bufLen);
}

void cc_mqtt5_##NAME##client_notify_network_disconnected(CC_Mqtt5ClientHandle handle, bool disconnected)
{
    COMMS_ASSERT(handle != nullptr);
    clientFromHandle(handle)->notifyNetworkDisconnected(disconnected);
}

bool cc_mqtt5_##NAME##client_is_network_disconnected(CC_Mqtt5ClientHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return clientFromHandle(handle)->isNetworkDisconnected();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_set_default_response_timeout(CC_Mqtt5ClientHandle handle, unsigned ms)
{
    if ((handle == nullptr) || (ms == 0U)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    clientFromHandle(handle)->configState().m_responseTimeoutMs = ms;
    return CC_Mqtt5ErrorCode_Success;
}

unsigned cc_mqtt5_##NAME##client_get_default_response_timeout(CC_Mqtt5ClientHandle handle)
{
    if (handle == nullptr) {
        return 0U;
    }

    return clientFromHandle(handle)->configState().m_responseTimeoutMs;
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_pub_topic_alias_alloc(CC_Mqtt5ClientHandle handle, const char* topic, unsigned char qos0RegsCount)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return clientFromHandle(handle)->allocPubTopicAlias(topic, qos0RegsCount);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_pub_topic_alias_free(CC_Mqtt5ClientHandle handle, const char* topic)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }        

    return clientFromHandle(handle)->freePubTopicAlias(topic);
}

unsigned cc_mqtt5_##NAME##client_pub_topic_alias_count(CC_Mqtt5ClientHandle handle)
{
    if (handle == nullptr) {
        return 0U;
    }         

    return clientFromHandle(handle)->pubTopicAliasCount();
}

bool cc_mqtt5_##NAME##client_pub_topic_alias_is_allocated(CC_Mqtt5ClientHandle handle, const char* topic)
{
    if (handle == nullptr) {
        return 0U;
    }         

    return clientFromHandle(handle)->pubTopicAliasIsAllocated(topic);    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_set_verify_outgoing_topic_enabled(CC_Mqtt5ClientHandle handle, bool enabled)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }  

    if constexpr (cc_mqtt5_client::Config::HasTopicFormatVerification) {
        clientFromHandle(handle)->configState().m_verifyOutgoingTopic = enabled;
        return CC_Mqtt5ErrorCode_Success;
    }
    else {
        return CC_Mqtt5ErrorCode_NotSupported;
    }
}

bool cc_mqtt5_##NAME##client_get_verify_outgoing_topic_enabled(CC_Mqtt5ClientHandle handle)
{
    if constexpr (cc_mqtt5_client::Config::HasTopicFormatVerification) {
        COMMS_ASSERT(handle != nullptr);
        return clientFromHandle(handle)->configState().m_verifyOutgoingTopic;
    }
    else {
        return false;
    }
}


CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_set_verify_incoming_topic_enabled(CC_Mqtt5ClientHandle handle, bool enabled)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }  

    if constexpr (cc_mqtt5_client::Config::HasTopicFormatVerification) {
        clientFromHandle(handle)->configState().m_verifyIncomingTopic = enabled;
        return CC_Mqtt5ErrorCode_Success;
    }
    else {
        return CC_Mqtt5ErrorCode_NotSupported;
    }
}

bool cc_mqtt5_##NAME##client_get_verify_incoming_topic_enabled(CC_Mqtt5ClientHandle handle)
{
    if constexpr (cc_mqtt5_client::Config::HasTopicFormatVerification) {
        COMMS_ASSERT(handle != nullptr);
        return clientFromHandle(handle)->configState().m_verifyIncomingTopic;
    }
    else {
        return false;
    }
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_set_verify_incoming_msg_subscribed(CC_Mqtt5ClientHandle handle, bool enabled)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }  

    if constexpr (cc_mqtt5_client::Config::HasSubTopicVerification) {
        clientFromHandle(handle)->configState().m_verifySubFilter = enabled;
        return CC_Mqtt5ErrorCode_Success;
    }
    else {
        return CC_Mqtt5ErrorCode_NotSupported;
    }
}

bool cc_mqtt5_##NAME##client_get_verify_incoming_msg_subscribed(CC_Mqtt5ClientHandle handle)
{
    if constexpr (cc_mqtt5_client::Config::HasSubTopicVerification) {
        COMMS_ASSERT(handle != nullptr);
        return clientFromHandle(handle)->configState().m_verifySubFilter;
    }
    else {
        return false;
    }
}

void cc_mqtt5_##NAME##client_init_user_prop(CC_Mqtt5UserProp* prop)
{
    *prop = CC_Mqtt5UserProp();
}

CC_Mqtt5ConnectHandle cc_mqtt5_##NAME##client_connect_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec)
{
    if (handle == nullptr) {
        if (ec != nullptr) {
            *ec = CC_Mqtt5ErrorCode_BadParam;
        }        
        return nullptr;
    }

    return handleFromConnectOp(clientFromHandle(handle)->connectPrepare(ec));
}

void cc_mqtt5_##NAME##client_connect_init_config_basic(CC_Mqtt5ConnectBasicConfig* config)
{
    *config = CC_Mqtt5ConnectBasicConfig();
    config->m_keepAlive = cc_mqtt5_client::SessionState::DefaultKeepAlive;
}

void cc_mqtt5_##NAME##client_connect_init_config_will(CC_Mqtt5ConnectWillConfig* config)
{
    *config = CC_Mqtt5ConnectWillConfig();
}

void cc_mqtt5_##NAME##client_connect_init_config_extra(CC_Mqtt5ConnectExtraConfig* config)
{
    *config = CC_Mqtt5ConnectExtraConfig();

    if constexpr (cc_mqtt5_client::Config::ReceiveMaxLimit > 0U) {
        config->m_receiveMaximum = cc_mqtt5_client::Config::ReceiveMaxLimit;
    }

    if constexpr (cc_mqtt5_client::Config::HasTopicAliases) {
        if constexpr (cc_mqtt5_client::Config::TopicAliasesLimit == 0) {
            config->m_topicAliasMaximum = cc_mqtt5_client::SessionState::DefaultTopicAliasMax;
        }
        else {
            config->m_topicAliasMaximum = cc_mqtt5_client::Config::TopicAliasesLimit;
        }
    }
}

void cc_mqtt5_##NAME##client_connect_init_config_auth(CC_Mqtt5AuthConfig* config)
{
    *config = CC_Mqtt5AuthConfig();
}

void cc_mqtt5_##NAME##client_connect_init_auth_info(CC_Mqtt5AuthInfo* info)
{
    *info = CC_Mqtt5AuthInfo();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_set_response_timeout(CC_Mqtt5ConnectHandle handle, unsigned ms)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    connectOpFromHandle(handle)->setResponseTimeout(ms);
    return CC_Mqtt5ErrorCode_Success;
}

unsigned cc_mqtt5_##NAME##client_connect_get_response_timeout(CC_Mqtt5ConnectHandle handle)
{
    if (handle == nullptr) {
        return 0U;
    }

    return connectOpFromHandle(handle)->getResponseTimeout();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_basic(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5ConnectBasicConfig* config)
{
    if ((handle == nullptr) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    return connectOpFromHandle(handle)->configBasic(*config);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_will(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5ConnectWillConfig* config)
{
    if ((handle == nullptr) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return connectOpFromHandle(handle)->configWill(*config);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_extra(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5ConnectExtraConfig* config)
{
    if ((handle == nullptr) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }        

    return connectOpFromHandle(handle)->configExtra(*config);    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_auth(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5AuthConfig* config)
{
    if ((handle == nullptr) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }        

    return connectOpFromHandle(handle)->configAuth(*config);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_add_user_prop(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5UserProp* prop)
{
    if ((handle == nullptr) || (prop == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }        

    return connectOpFromHandle(handle)->addUserProp(*prop);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_add_will_user_prop(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5UserProp* prop)
{
    if ((handle == nullptr) || (prop == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }        

    return connectOpFromHandle(handle)->addWillUserProp(*prop);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_send(CC_Mqtt5ConnectHandle handle, CC_Mqtt5ConnectCompleteCb cb, void* cbData)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    return connectOpFromHandle(handle)->send(cb, cbData);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_cancel(CC_Mqtt5ConnectHandle handle)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return connectOpFromHandle(handle)->cancel();       
}

bool cc_mqtt5_##NAME##client_is_connected(CC_Mqtt5ClientHandle handle)
{
    if (handle == nullptr) {
        return false;
    }

    return clientFromHandle(handle)->sessionState().m_connected;
}

CC_Mqtt5DisconnectHandle cc_mqtt5_##NAME##client_disconnect_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec)
{
    if (handle == nullptr) {
        if (ec != nullptr) {
            *ec = CC_Mqtt5ErrorCode_BadParam;
        }        
        return nullptr;
    }

    return handleFromDisconnectOp(clientFromHandle(handle)->disconnectPrepare(ec));    
}

void cc_mqtt5_##NAME##client_disconnect_init_config(CC_Mqtt5DisconnectConfig* config)
{
    *config = CC_Mqtt5DisconnectConfig();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_disconnect_config(CC_Mqtt5DisconnectHandle handle, const CC_Mqtt5DisconnectConfig* config)
{
    if ((handle == nullptr) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return disconnectOpFromHandle(handle)->configBasic(*config);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_disconnect_add_user_prop(CC_Mqtt5DisconnectHandle handle, const CC_Mqtt5UserProp* prop)
{
    if ((handle == nullptr) || (prop == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }        

    return disconnectOpFromHandle(handle)->addUserProp(*prop);    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_disconnect_send(CC_Mqtt5DisconnectHandle handle)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }  

    return disconnectOpFromHandle(handle)->send();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_disconnect_cancel(CC_Mqtt5DisconnectHandle handle)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return disconnectOpFromHandle(handle)->cancel();       
}

CC_Mqtt5SubscribeHandle cc_mqtt5_##NAME##client_subscribe_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec)
{
    if (handle == nullptr) {
        if (ec != nullptr) {
            *ec = CC_Mqtt5ErrorCode_BadParam;
        }        
        return nullptr;
    }

    return handleFromSubscribeOp(clientFromHandle(handle)->subscribePrepare(ec));    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_set_response_timeout(CC_Mqtt5SubscribeHandle handle, unsigned ms)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    subscribeOpFromHandle(handle)->setResponseTimeout(ms);
    return CC_Mqtt5ErrorCode_Success;
}

unsigned cc_mqtt5_##NAME##client_subscribe_get_response_timeout(CC_Mqtt5SubscribeHandle handle)
{
    if (handle == nullptr) {
        return 0U;
    }

    return subscribeOpFromHandle(handle)->getResponseTimeout();
}

void cc_mqtt5_##NAME##client_subscribe_init_config_topic(CC_Mqtt5SubscribeTopicConfig* config)
{
    *config = CC_Mqtt5SubscribeTopicConfig();
    config->m_maxQos = CC_Mqtt5QoS_ExactlyOnceDelivery;
}

void cc_mqtt5_##NAME##client_subscribe_init_config_extra(CC_Mqtt5SubscribeExtraConfig* config)
{
    *config = CC_Mqtt5SubscribeExtraConfig();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_config_topic(CC_Mqtt5SubscribeHandle handle, const CC_Mqtt5SubscribeTopicConfig* config)
{
    if ((handle == nullptr) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    return subscribeOpFromHandle(handle)->configTopic(*config);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_config_extra(CC_Mqtt5SubscribeHandle handle, const CC_Mqtt5SubscribeExtraConfig* config)
{
    if ((handle == nullptr) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    return subscribeOpFromHandle(handle)->configExtra(*config);    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_add_user_prop(CC_Mqtt5SubscribeHandle handle, const CC_Mqtt5UserProp* prop)
{
    if ((handle == nullptr) || (prop == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return subscribeOpFromHandle(handle)->addUserProp(*prop);    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_send(CC_Mqtt5SubscribeHandle handle, CC_Mqtt5SubscribeCompleteCb cb, void* cbData)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    return subscribeOpFromHandle(handle)->send(cb, cbData);    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_cancel(CC_Mqtt5SubscribeHandle handle)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return subscribeOpFromHandle(handle)->cancel();       
}

unsigned cc_mqtt5_##NAME##client_subscribe_get_packet_id(CC_Mqtt5SubscribeHandle handle)
{
    if (handle == nullptr) {
        return 0U;
    }        

    return subscribeOpFromHandle(handle)->getPacketId();       
}

CC_Mqtt5UnsubscribeHandle cc_mqtt5_##NAME##client_unsubscribe_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec)
{
    if (handle == nullptr) {
        if (ec != nullptr) {
            *ec = CC_Mqtt5ErrorCode_BadParam;
        }        
        return nullptr;
    }

    return handleFromUnsubscribeOp(clientFromHandle(handle)->unsubscribePrepare(ec)); 
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_set_response_timeout(CC_Mqtt5UnsubscribeHandle handle, unsigned ms)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    unsubscribeOpFromHandle(handle)->setResponseTimeout(ms);
    return CC_Mqtt5ErrorCode_Success;    
}

unsigned cc_mqtt5_##NAME##client_unsubscribe_get_response_timeout(CC_Mqtt5UnsubscribeHandle handle)
{
    if (handle == nullptr) {
        return 0U;
    }

    return unsubscribeOpFromHandle(handle)->getResponseTimeout();
}

void cc_mqtt5_##NAME##client_unsubscribe_init_config_topic(CC_Mqtt5UnsubscribeTopicConfig* config)
{
    *config = CC_Mqtt5UnsubscribeTopicConfig();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_config_topic(CC_Mqtt5UnsubscribeHandle handle, const CC_Mqtt5UnsubscribeTopicConfig* config)
{
    if ((handle == nullptr) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    return unsubscribeOpFromHandle(handle)->configTopic(*config);    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_add_user_prop(CC_Mqtt5UnsubscribeHandle handle, const CC_Mqtt5UserProp* prop)
{
    if ((handle == nullptr) || (prop == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return unsubscribeOpFromHandle(handle)->addUserProp(*prop);      
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_send(CC_Mqtt5UnsubscribeHandle handle, CC_Mqtt5UnsubscribeCompleteCb cb, void* cbData)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    return unsubscribeOpFromHandle(handle)->send(cb, cbData);      
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_cancel(CC_Mqtt5UnsubscribeHandle handle)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return unsubscribeOpFromHandle(handle)->cancel();
}

unsigned cc_mqtt5_##NAME##client_unsubscribe_get_packet_id(CC_Mqtt5UnsubscribeHandle handle)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return unsubscribeOpFromHandle(handle)->getPacketId();    
}

CC_Mqtt5PublishHandle cc_mqtt5_##NAME##client_publish_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec)
{
    if (handle == nullptr) {
        if (ec != nullptr) {
            *ec = CC_Mqtt5ErrorCode_BadParam;
        }        
        return nullptr;
    }

    return handleFromSendOp(clientFromHandle(handle)->publishPrepare(ec));     
}

void cc_mqtt5_##NAME##client_publish_init_config_basic(CC_Mqtt5PublishBasicConfig* config)
{
    *config = CC_Mqtt5PublishBasicConfig();
}

void cc_mqtt5_##NAME##client_publish_init_config_extra(CC_Mqtt5PublishExtraConfig* config)
{
    *config = CC_Mqtt5PublishExtraConfig();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_set_response_timeout(CC_Mqtt5PublishHandle handle, unsigned ms)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    sendOpFromHandle(handle)->setResponseTimeout(ms);
    return CC_Mqtt5ErrorCode_Success;       
}

unsigned cc_mqtt5_##NAME##client_publish_get_response_timeout(CC_Mqtt5PublishHandle handle)
{
    if (handle == nullptr) {
        return 0U;
    }

    return sendOpFromHandle(handle)->getResponseTimeout();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_set_resend_attempts(CC_Mqtt5PublishHandle handle, unsigned attempts)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    return sendOpFromHandle(handle)->setResendAttempts(attempts);
}

unsigned cc_mqtt5_##NAME##client_publish_get_resend_attempts(CC_Mqtt5PublishHandle handle)
{
    if (handle == nullptr) {
        return 0U;
    }

    return sendOpFromHandle(handle)->getResendAttempts();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_config_basic(CC_Mqtt5PublishHandle handle, const CC_Mqtt5PublishBasicConfig* config)
{
    if ((handle == nullptr) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }
    
    return sendOpFromHandle(handle)->configBasic(*config);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_config_extra(CC_Mqtt5PublishHandle handle, const CC_Mqtt5PublishExtraConfig* config)
{
    if ((handle == nullptr) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }
    
    return sendOpFromHandle(handle)->configExtra(*config);    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_add_user_prop(CC_Mqtt5PublishHandle handle, const CC_Mqtt5UserProp* prop)
{
    if ((handle == nullptr) || (prop == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return sendOpFromHandle(handle)->addUserProp(*prop);       
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_send(CC_Mqtt5PublishHandle handle, CC_Mqtt5PublishCompleteCb cb, void* cbData)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return sendOpFromHandle(handle)->send(cb, cbData);         
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_cancel(CC_Mqtt5PublishHandle handle)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return sendOpFromHandle(handle)->cancel();
}

unsigned cc_mqtt5_##NAME##client_publish_get_packet_id(CC_Mqtt5PublishHandle handle)
{
    if (handle == nullptr) {
        return 0U;
    }    

    return sendOpFromHandle(handle)->getPacketId();    
}

CC_Mqtt5ReauthHandle cc_mqtt5_##NAME##client_reauth_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec)
{
    if (handle == nullptr) {
        if (ec != nullptr) {
            *ec = CC_Mqtt5ErrorCode_BadParam;
        }        
        return nullptr;
    }

    return handleFromReauthOp(clientFromHandle(handle)->reauthPrepare(ec));       
}

void cc_mqtt5_##NAME##client_reauth_init_config_auth(CC_Mqtt5AuthConfig* config)
{
    *config = CC_Mqtt5AuthConfig();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_reauth_set_response_timeout(CC_Mqtt5ReauthHandle handle, unsigned ms)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    reauthOpFromHandle(handle)->setResponseTimeout(ms);
    return CC_Mqtt5ErrorCode_Success;  
}

unsigned cc_mqtt5_##NAME##client_reauth_get_response_timeout(CC_Mqtt5ReauthHandle handle)
{
    if (handle == nullptr) {
        return 0U;
    }

    return reauthOpFromHandle(handle)->getResponseTimeout();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_reauth_config_auth(CC_Mqtt5ReauthHandle handle, const CC_Mqtt5AuthConfig* config)
{
    if ((handle == nullptr) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }        

    return reauthOpFromHandle(handle)->configAuth(*config);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_reauth_add_user_prop(CC_Mqtt5ReauthHandle handle, const CC_Mqtt5UserProp* prop)
{
    if ((handle == nullptr) || (prop == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return reauthOpFromHandle(handle)->addUserProp(*prop);       
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_reauth_send(CC_Mqtt5ReauthHandle handle, CC_Mqtt5ReauthCompleteCb cb, void* cbData)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return reauthOpFromHandle(handle)->send(cb, cbData);    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_reauth_cancel(CC_Mqtt5ReauthHandle handle)
{
    if (handle == nullptr) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return reauthOpFromHandle(handle)->cancel();       
}

// --------------------- Callbacks ---------------------

void cc_mqtt5_##NAME##client_set_next_tick_program_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5NextTickProgramCb cb,
    void* data)
{
    clientFromHandle(handle)->setNextTickProgramCallback(cb, data);
}

void cc_mqtt5_##NAME##client_set_cancel_next_tick_wait_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5CancelNextTickWaitCb cb,
    void* data)
{
    clientFromHandle(handle)->setCancelNextTickWaitCallback(cb, data);
}

void cc_mqtt5_##NAME##client_set_send_output_data_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5SendOutputDataCb cb,
    void* data)
{
    clientFromHandle(handle)->setSendOutputDataCallback(cb, data);
}

void cc_mqtt5_##NAME##client_set_broker_disconnect_report_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5BrokerDisconnectReportCb cb,
    void* data)
{
    clientFromHandle(handle)->setBrokerDisconnectReportCallback(cb, data);
}

void cc_mqtt5_##NAME##client_set_message_received_report_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5MessageReceivedReportCb cb,
    void* data)
{
    clientFromHandle(handle)->setMessageReceivedCallback(cb, data);
}

void cc_mqtt5_##NAME##client_set_error_log_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5ErrorLogCb cb,
    void* data)
{
    clientFromHandle(handle)->setErrorLogCallback(cb, data);
}