//
// Copyright 2023 - 2024 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

/// @file
/// @brief Functions of the CommsChampion MQTT5 client library.

#pragma once

#include "cc_mqtt5_client/common.h"

#ifdef __cplusplus
extern "C" {
#endif // #ifdef __cplusplus

/// @defgroup global "Global Data Types and Functions"
/// @defgroup client "Client Data Types and Functions"
/// @defgroup connect "Connect Operation Data Type and Functions"
/// @defgroup disconnect "Disconnect Operation Data Type and Functions"
/// @defgroup subscribe "Subscribe Operation Data Type and Functions"
/// @defgroup unsubscribe "Unsubscribe Operation Data Type and Functions"
/// @defgroup publish "Publish Operation Data Type and Functions"
/// @defgroup reauth "Re-authenticate Operation Data Type and Functions"

/// @brief Allocate new client.
/// @details When work with the client is complete, @ref cc_mqtt5_##NAME##client_free()
///     function must be invoked.
/// @return Handle to allocated client object. This handle needs to be passed
///     as first parameter to all other API functions.
/// @ingroup client
CC_Mqtt5ClientHandle cc_mqtt5_##NAME##client_alloc();

/// @brief Free previously allocated client.
/// @details The callbacks of the incomplete operations will be invoked with 
///     @ref CC_Mqtt5AsyncOpStatus_Aborted status.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @pre Mustn't be called from within a callback, use next event loop iteration.
/// @post The client handler becomes invalid and cannot be used any longer.
/// @ingroup client
void cc_mqtt5_##NAME##client_free(CC_Mqtt5ClientHandle handle);

/// @brief Notify client about requested time expiry.
/// @details The reported amount of milliseconds needs to be from the 
///     last request to program timer via callback (set by
///     cc_mqtt5_##NAME##client_set_next_tick_program_callback()).
///     It can be less than actually requested via the callback. If this
///     function is called, the library assumes that previously requested
///     timeout measurement is not in progress any more, and will request
///     new measurement if needed.
///     This call may cause invocation of some other callbacks, such as a request
///     to send new data to the broker.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] ms Number of elapsed @b milliseconds.
/// @ingroup client
void cc_mqtt5_##NAME##client_tick(CC_Mqtt5ClientHandle handle, unsigned ms);

/// @brief Provide data (received over I/O link), to the library for processing.
/// @details This call may cause invocation of some callbacks, such as 
///     request to cancel the currently running time measurement, send some messages to
///     the broker, report incoming application message, and (re)start time
///     measurement.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] buf Pointer to the buffer of data to process.
/// @param[in] bufLen Number of bytes in the data buffer.
/// @return Number of processed bytes.
/// @note The function returns number of bytes that were actually consumed, and
///     can be removed from the holding buffer.
/// @ingroup client
unsigned cc_mqtt5_##NAME##client_process_data(CC_Mqtt5ClientHandle handle, const unsigned char* buf, unsigned bufLen);

/// @brief Report network disconnected status
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] disconnected Flag for network disconnection: @b true when disconnected, @b false when (re)connected.
/// @ingroup client
void cc_mqtt5_##NAME##client_notify_network_disconnected(CC_Mqtt5ClientHandle handle, bool disconnected);

/// @brief Check current network disconnected status
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @return @b true when disconnected, @b false when0 connected.
/// @note After invocation of the @ref cc_mqtt5_##NAME##client_alloc(), this function will return @b false, i.e.
/// after client allocation network is assumend connected.
/// @ingroup client
bool cc_mqtt5_##NAME##client_is_network_disconnected(CC_Mqtt5ClientHandle handle);

/// @brief Configure default response timeout period
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] ms Response timeout duration in @b milliseconds.
/// @return Error code of the operation
/// @ingroup client
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_set_default_response_timeout(CC_Mqtt5ClientHandle handle, unsigned ms);

/// @brief Retrieved currently configured default response timeout period
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @return Response timeout duration in @b milliseconds.
/// @ingroup client
unsigned cc_mqtt5_##NAME##client_get_default_response_timeout(CC_Mqtt5ClientHandle handle);

/// @brief Allocate alias for topic.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] topic Topic string for which the alias needs to be allocated.
/// @param[in] qos0RegsCount Amount of times to report topic alias to the broker when QoS0 messages are used, mustn't be greather than 255.
/// @return Error code of the operation
/// @ingroup client
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_pub_topic_alias_alloc(CC_Mqtt5ClientHandle handle, const char* topic, unsigned qos0RegsCount);

/// @brief Free alias for topic for another use.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] topic Topic string for which the alias was allocated before.
/// @return Error code of the operation
/// @ingroup client
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_pub_topic_alias_free(CC_Mqtt5ClientHandle handle, const char* topic);

/// @brief Get amount of allocated topic aliases.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @return Amount of allocated topic aliases
/// @ingroup client
unsigned cc_mqtt5_##NAME##client_pub_topic_alias_count(CC_Mqtt5ClientHandle handle);

/// @brief Check if topic alias is allocated for topic.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] topic Topic string .
/// @return @b true in case of allocated, @b false otherwise
/// @ingroup client
bool cc_mqtt5_##NAME##client_pub_topic_alias_is_allocated(CC_Mqtt5ClientHandle handle, const char* topic);

/// @brief Control outgoing topic format verification
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] enabled @b true to enable topic format verification, @b false to disable.
/// @return Error code of the operation
/// @ingroup client
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_set_verify_outgoing_topic_enabled(CC_Mqtt5ClientHandle handle, bool enabled);

/// @brief Retrieve current outgoing topic format verification control
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @return @b true when enabled, @b false when disabled
/// @ingroup client
bool cc_mqtt5_##NAME##client_get_verify_outgoing_topic_enabled(CC_Mqtt5ClientHandle handle);

/// @brief Control incoming topic format verification
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] enabled @b true to enable topic format verification, @b false to disable.
/// @return Error code of the operation
/// @ingroup client
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_set_verify_incoming_topic_enabled(CC_Mqtt5ClientHandle handle, bool enabled);

/// @brief Retrieve current incoming topic format verification control
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @return @b true when enabled, @b false when disabled
/// @ingroup client
bool cc_mqtt5_##NAME##client_get_verify_incoming_topic_enabled(CC_Mqtt5ClientHandle handle);

/// @brief Control verification of the incoming message being correctly subscribed.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] enabled @b true to enable topic format verification, @b false to disable.
/// @return Error code of the operation
/// @ingroup client
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_set_verify_incoming_msg_subscribed(CC_Mqtt5ClientHandle handle, bool enabled);

/// @brief Retrieve current incoming message being correctly subscribed control.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @return @b true when enabled, @b false when disabled
/// @ingroup client
bool cc_mqtt5_##NAME##client_get_verify_incoming_msg_subscribed(CC_Mqtt5ClientHandle handle);

/// @brief Intialize the @ref CC_Mqtt5UserProp structure.
/// @param[out] prop User property info. Must not be NULL.
/// @ingroup global
void cc_mqtt5_##NAME##client_init_user_prop(CC_Mqtt5UserProp* prop);

/// @brief Prepare "connect" operation.
/// @details For successful operation the client needs to be in the "disconnected" state and 
///     there are no other incomplete "connect" operation
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[out] ec Error code reporting result of the operation. Can be NULL.
/// @return Handle of the "connect" operation, will be NULL in case of failure. To analyze the reason failure use "ec" output parameter.
/// @pre The function can NOT be called from within a callback, use next event iteration.
/// @post The "connect" operation is allocated, use either @ref cc_mqtt5_##NAME##client_connect_send()
///     or @ref cc_mqtt5_##NAME##client_connect_cancel() to prevent memory leaks.
/// @ingroup connect
CC_Mqtt5ConnectHandle cc_mqtt5_##NAME##client_connect_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec);

/// @brief Intialize the @ref CC_Mqtt5ConnectBasicConfig configuration structure.
/// @param[out] config Configuration structure. Must not be NULL.
/// @ingroup connect
void cc_mqtt5_##NAME##client_connect_init_config_basic(CC_Mqtt5ConnectBasicConfig* config);

/// @brief Intialize the @ref CC_Mqtt5ConnectWillConfig configuration structure.
/// @param[out] config Configuration structure. Must not be NULL.
/// @ingroup connect
void cc_mqtt5_##NAME##client_connect_init_config_will(CC_Mqtt5ConnectWillConfig* config);

/// @brief Intialize the @ref CC_Mqtt5ConnectWillConfig configuration structure.
/// @param[out] config Configuration structure. Must not be NULL.
/// @ingroup connect
void cc_mqtt5_##NAME##client_connect_init_config_extra(CC_Mqtt5ConnectExtraConfig* config);

/// @brief Intialize the @ref CC_Mqtt5AuthConfig configuration structure.
/// @param[out] config Configuration structure. Must not be NULL.
/// @ingroup connect
void cc_mqtt5_##NAME##client_connect_init_config_auth(CC_Mqtt5AuthConfig* config);

/// @brief Intialize the @ref CC_Mqtt5AuthInfo configuration structure.
/// @param[out] info Authentication information structure. Must not be NULL.
/// @ingroup connect
void cc_mqtt5_##NAME##client_connect_init_auth_info(CC_Mqtt5AuthInfo* info);

/// @brief Configure the broker response timeout for the "connect" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_connect_prepare() function.
/// @param[in] ms Response timeout duration in @b milliseconds.
/// @return Result code of the call.
/// @ingroup connect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_set_response_timeout(CC_Mqtt5ConnectHandle handle, unsigned ms);

/// @brief Retrieve the configured the broker response timeout for the "connect" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_connect_prepare() function.
/// @return Response timeout duration in @b milliseconds.
/// @ingroup connect
unsigned cc_mqtt5_##NAME##client_connect_get_response_timeout(CC_Mqtt5ConnectHandle handle);

/// @brief Perform basic configuration of the "connect" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_connect_prepare() function.
/// @param[in] config Basic configuration structure. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @post Some of the properties can get assigned regardless of the return value.
/// @ingroup connect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_basic(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5ConnectBasicConfig* config);

/// @brief Perform will configuration of the "connect" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_connect_prepare() function.
/// @param[in] config Will configuration structure. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @pre Mustn't be called more than once for a single "connect" operation.
/// @post Some of the properties can get assigned regardless of the return value.
/// @ingroup connect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_will(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5ConnectWillConfig* config);

/// @brief Perform extra properties configuration of the "connect" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_connect_prepare() function.
/// @param[in] config Extra properties configuration structure. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @pre Mustn't be called more than once for a single "connect" operation.
/// @post Some of the properties can get assigned regardless of the return value.
/// @ingroup connect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_extra(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5ConnectExtraConfig* config);

/// @brief Perform authentication handshake configuration of the "connect" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_connect_prepare() function.
/// @param[in] config Authentication configuration structure. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @pre Mustn't be called more than once for a single "connect" operation.
/// @post Some of the properties can get assigned regardless of the return value.
/// @ingroup connect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_auth(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5AuthConfig* config);

/// @brief Add user property to the configuration of the "connect" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_connect_prepare() function.
/// @param[in] prop Single user property info. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @ingroup connect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_add_user_prop(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5UserProp* prop);

/// @brief Add user property to the will configuration of the "connect" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_connect_prepare() function.
/// @param[in] prop Single user property info. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @pre The will has been previously configured using the @ref cc_mqtt5_##NAME##client_connect_config_will().
/// @ingroup connect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_add_will_user_prop(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5UserProp* prop);

/// @brief Send the configured "connect" operation to broker
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_connect_prepare() function.
/// @param[in] cb Callback to be invoked when "connect" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @post The handle of the "connect" operation can be discarded.
/// @post The provided callback will be invoked when the "connect" operation is complete <b> if and only if</b>
///     the function returns @ref CC_Mqtt5ErrorCode_Success.
/// @ingroup connect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_send(CC_Mqtt5ConnectHandle handle, CC_Mqtt5ConnectCompleteCb cb, void* cbData);

/// @brief Cancel the allocated "connect" operation
/// @details In case the @ref cc_mqtt5_##NAME##client_connect_send() function was successfully called before,
///     the operation is cancelled @b without callback invocation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_connect_prepare() function.
/// @return Result code of the call.
/// @post The handle of the "connect" operation is no longer valid and must be discarded.
/// @ingroup connect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_cancel(CC_Mqtt5ConnectHandle handle);

/// @brief Prepare, configure, and send "connect" request in one go (simple version) 
/// @details Abstracts away sequence of the following functions invocation:
///     @li @ref cc_mqtt5_##NAME##client_connect_prepare()
///     @li @ref cc_mqtt5_##NAME##client_connect_config_basic()
///     @li @ref cc_mqtt5_##NAME##client_connect_send()
///
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] basicConfig Basic configuration. Can be NULL.
/// @param[in] cb Callback to be invoked when "connect" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @ingroup connect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_simple(
    CC_Mqtt5ClientHandle handle,
    const CC_Mqtt5ConnectBasicConfig* basicConfig,
    CC_Mqtt5ConnectCompleteCb cb, 
    void* cbData);

/// @brief Prepare, configure, and send "connect" request in one go (full version) 
/// @details Abstracts away sequence of the following functions invocation:
///     @li @ref cc_mqtt5_##NAME##client_connect_prepare()
///     @li @ref cc_mqtt5_##NAME##client_connect_config_basic()
///     @li @ref cc_mqtt5_##NAME##client_connect_config_will()
///     @li @ref cc_mqtt5_##NAME##client_connect_config_extra()
///     @li @ref cc_mqtt5_##NAME##client_connect_config_auth()
///     @li @ref cc_mqtt5_##NAME##client_connect_send()
///
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] basicConfig Basic configuration. Can be NULL.
/// @param[in] willConfig Will configuration. Can be NULL.
/// @param[in] extraConfig Extra configuration. Can be NULL.
/// @param[in] authConfig Auth configuration. Can be NULL.
/// @param[in] cb Callback to be invoked when "connect" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @ingroup connect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_full(
    CC_Mqtt5ClientHandle handle,
    const CC_Mqtt5ConnectBasicConfig* basicConfig,
    const CC_Mqtt5ConnectWillConfig* willConfig,
    const CC_Mqtt5ConnectExtraConfig* extraConfig,
    const CC_Mqtt5AuthConfig* authConfig,
    CC_Mqtt5ConnectCompleteCb cb, 
    void* cbData);    

/// @brief Check the inner state of the library of whether it's connected to the broker.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @ingroup connect
bool cc_mqtt5_##NAME##client_is_connected(CC_Mqtt5ClientHandle handle);

/// @brief Prepare "disconnect" operation.
/// @details For successful operation the client needs to be in the "connected" state and 
///     there were no other prepared or complete "disconnect" operation since last "connect" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[out] ec Error code reporting result of the operation. Can be NULL.
/// @return Handle of the "disconnect" operation, will be NULL in case of failure. To analyze the reason failure use "ec" output parameter.
/// @post The "disconnect" operation is allocated, use either @ref cc_mqtt5_##NAME##client_disconnect_send()
///     or @ref cc_mqtt5_##NAME##client_disconnect_cancel() to prevent memory leaks.
/// @ingroup disconnect
CC_Mqtt5DisconnectHandle cc_mqtt5_##NAME##client_disconnect_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec);

/// @brief Intialize the @ref CC_Mqtt5DisconnectConfig configuration structure.
/// @param[out] config Configuration structure. Must not be NULL.
/// @ingroup disconnect
void cc_mqtt5_##NAME##client_disconnect_init_config(CC_Mqtt5DisconnectConfig* config);

/// @brief Perform configuration of the "disconnect" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_disconnect_prepare() function.
/// @param[in] config Extra properties configuration structure. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @pre Mustn't be called more than once for a single "disconnect" operation.
/// @post Some of the properties can get assigned regardless of the return value.
/// @ingroup disconnect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_disconnect_config(CC_Mqtt5DisconnectHandle handle, const CC_Mqtt5DisconnectConfig* config);

/// @brief Add user property to the configuration of the "disconnect" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_disconnect_prepare() function.
/// @param[in] prop Single user property info. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @ingroup disconnect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_disconnect_add_user_prop(CC_Mqtt5DisconnectHandle handle, const CC_Mqtt5UserProp* prop);

/// @brief Send the configured "disconnect" operation to broker
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_disconnect_prepare() function.
/// @return Result code of the call.
/// @post The handle of the "disconnect" operation is not longer valid and must be discarded.
/// @ingroup disconnect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_disconnect_send(CC_Mqtt5DisconnectHandle handle);

/// @brief Cancel the allocated "disconnect" operation
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_disconnect_prepare() function.
/// @return Result code of the call.
/// @post The handle of the "disconnect" operation is no longer valid and must be discarded.
/// @ingroup disconnect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_disconnect_cancel(CC_Mqtt5DisconnectHandle handle);

/// @brief Prepare, configure, and send "disconnect" request in one go.
/// @details Abstracts away sequence of the following functions invocation:
///     @li @ref cc_mqtt5_##NAME##client_disconnect_prepare()
///     @li @ref cc_mqtt5_##NAME##client_disconnect_config()
///     @li @ref cc_mqtt5_##NAME##client_disconnect_send()
///
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] config Configuration. Can be NULL.
/// @return Result code of the call.
/// @ingroup disconnect
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_disconnect(
    CC_Mqtt5ClientHandle handle,
    const CC_Mqtt5DisconnectConfig* config);

/// @brief Prepare "subscribe" operation.
/// @details For successful operation the client needs to be in the "connected" state.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[out] ec Error code reporting result of the operation. Can be NULL.
/// @return Handle of the "subscribe" operation, will be NULL in case of failure. To analyze the reason failure use "ec" output parameter.
/// @post The "subscribe" operation is allocated, use either @ref cc_mqtt5_##NAME##client_subscribe_send()
///     or @ref cc_mqtt5_##NAME##client_subscribe_cancel() to prevent memory leaks.
/// @ingroup subscribe
CC_Mqtt5SubscribeHandle cc_mqtt5_##NAME##client_subscribe_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec);

/// @brief Configure the broker response timeout for the "subscribe" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_subscribe_prepare() function.
/// @param[in] ms Response timeout duration in @b milliseconds.
/// @return Result code of the call.
/// @ingroup subscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_set_response_timeout(CC_Mqtt5SubscribeHandle handle, unsigned ms);

/// @brief Retrieve the configured the broker response timeout for the "subscribe" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_subscribe_prepare() function.
/// @return Response timeout duration in @b milliseconds.
/// @ingroup subscribe
unsigned cc_mqtt5_##NAME##client_subscribe_get_response_timeout(CC_Mqtt5SubscribeHandle handle);

/// @brief Intialize the @ref CC_Mqtt5SubscribeTopicConfig configuration structure.
/// @param[out] config Configuration structure. Must not be NULL.
/// @ingroup subscribe
void cc_mqtt5_##NAME##client_subscribe_init_config_topic(CC_Mqtt5SubscribeTopicConfig* config);

/// @brief Intialize the @ref CC_Mqtt5SubscribeExtraConfig configuration structure.
/// @param[out] config Configuration structure. Must not be NULL.
/// @ingroup subscribe
void cc_mqtt5_##NAME##client_subscribe_init_config_extra(CC_Mqtt5SubscribeExtraConfig* config);

/// @brief Add topic configuration of the "subscribe" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_subscribe_prepare() function.
/// @param[in] config Topic configuration structure. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @ingroup subscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_config_topic(CC_Mqtt5SubscribeHandle handle, const CC_Mqtt5SubscribeTopicConfig* config);

/// @brief Perform extra properties configuration of the "subscribe" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_subscribe_prepare() function.
/// @param[in] config Extra properties configuration structure. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @pre Mustn't be called more than once for a single "subscribe" operation.
/// @ingroup subscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_config_extra(CC_Mqtt5SubscribeHandle handle, const CC_Mqtt5SubscribeExtraConfig* config);

/// @brief Add user property to the configuration of the "subscribe" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_subscribe_prepare() function.
/// @param[in] prop Single user property info. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @ingroup subscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_add_user_prop(CC_Mqtt5SubscribeHandle handle, const CC_Mqtt5UserProp* prop);

/// @brief Send the configured "subscribe" operation to broker
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_subscribe_prepare() function.
/// @param[in] cb Callback to be invoked when "subscribe" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @pre At least one topic has been configured using @ref cc_mqtt5_##NAME##client_subscribe_config_topic.
/// @post The handle of the "subscribe" operation can be discarded.
/// @post The provided callback will be invoked when the "subscribe" operation is complete <b> if and only if</b>
///     the function returns @ref CC_Mqtt5ErrorCode_Success.
/// @ingroup subscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_send(CC_Mqtt5SubscribeHandle handle, CC_Mqtt5SubscribeCompleteCb cb, void* cbData);

/// @brief Cancel the allocated "subscribe" operation
/// @details In case the @ref cc_mqtt5_##NAME##client_subscribe_send() function was successfully called before,
///     the operation is cancelled @b without callback invocation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_subscribe_prepare() function.
/// @return Result code of the call.
/// @post The handle of the "subscribe" operation is no longer valid and must be discarded.
/// @ingroup subscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_cancel(CC_Mqtt5SubscribeHandle handle);

/// @brief Prepare, configure, and send "subscribe" request in one go (simple version) 
/// @details Abstracts away sequence of the following functions invocation:
///     @li @ref cc_mqtt5_##NAME##client_subscribe_prepare()
///     @li @ref cc_mqtt5_##NAME##client_subscribe_config_topic()
///     @li @ref cc_mqtt5_##NAME##client_subscribe_send()
///
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] topicConfig Topic configuration. Can be NULL.
/// @param[in] cb Callback to be invoked when "subscribe" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @ingroup subscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_simple(
    CC_Mqtt5ClientHandle handle,
    const CC_Mqtt5SubscribeTopicConfig* topicConfig,
    CC_Mqtt5SubscribeCompleteCb cb, 
    void* cbData);

/// @brief Prepare, configure, and send "subscribe" request in one go (full version) 
/// @details Abstracts away sequence of the following functions invocation:
///     @li @ref cc_mqtt5_##NAME##client_subscribe_prepare()
///     @li @ref cc_mqtt5_##NAME##client_subscribe_config_topic() (multiple times)
///     @li @ref cc_mqtt5_##NAME##client_subscribe_config_extra()
///     @li @ref cc_mqtt5_##NAME##client_subscribe_send()
///
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] topicConfigs Pointer to array of the topic configurations.
/// @param[in] topicConfigsCount Amount of the topic configurations in the array.
/// @param[in] extraConfig Extra configuration. Can be NULL.
/// @param[in] cb Callback to be invoked when "subscribe" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @ingroup subscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_subscribe_full(
    CC_Mqtt5ClientHandle handle,
    const CC_Mqtt5SubscribeTopicConfig* topicConfigs,
    unsigned topicConfigsCount,
    const CC_Mqtt5SubscribeExtraConfig* extraConfig,
    CC_Mqtt5SubscribeCompleteCb cb, 
    void* cbData);  

/// @brief Prepare "unsubscribe" operation.
/// @details For successful operation the client needs to be in the "connected" state.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[out] ec Error code reporting result of the operation. Can be NULL.
/// @return Handle of the "unsubscribe" operation, will be NULL in case of failure. To analyze the reason failure use "ec" output parameter.
/// @post The "unsubscribe" operation is allocated, use either @ref cc_mqtt5_##NAME##client_unsubscribe_send()
///     or @ref cc_mqtt5_##NAME##client_unsubscribe_cancel() to prevent memory leaks.
/// @ingroup unsubscribe
CC_Mqtt5UnsubscribeHandle cc_mqtt5_##NAME##client_unsubscribe_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec);

/// @brief Configure the broker response timeout for the "unsubscribe" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_unsubscribe_prepare() function.
/// @param[in] ms Response timeout duration in @b milliseconds.
/// @return Result code of the call.
/// @ingroup unsubscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_set_response_timeout(CC_Mqtt5UnsubscribeHandle handle, unsigned ms);

/// @brief Retrieve the configured the broker response timeout for the "unsubscribe" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_unsubscribe_prepare() function.
/// @return Response timeout duration in @b milliseconds.
/// @ingroup unsubscribe
unsigned cc_mqtt5_##NAME##client_unsubscribe_get_response_timeout(CC_Mqtt5UnsubscribeHandle handle);

/// @brief Intialize the @ref CC_Mqtt5UnsubscribeTopicConfig configuration structure.
/// @param[out] config Configuration structure. Must not be NULL.
/// @ingroup unsubscribe
void cc_mqtt5_##NAME##client_unsubscribe_init_config_topic(CC_Mqtt5UnsubscribeTopicConfig* config);

/// @brief Add topic configuration of the "unsubscribe" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_unsubscribe_prepare() function.
/// @param[in] config Topic configuration structure. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @ingroup unsubscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_config_topic(CC_Mqtt5UnsubscribeHandle handle, const CC_Mqtt5UnsubscribeTopicConfig* config);

/// @brief Add user property to the configuration of the "unsubscribe" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_unsubscribe_prepare() function.
/// @param[in] prop Single user property info. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @ingroup unsubscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_add_user_prop(CC_Mqtt5UnsubscribeHandle handle, const CC_Mqtt5UserProp* prop);

/// @brief Send the configured "unsubscribe" operation to broker
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_unsubscribe_prepare() function.
/// @param[in] cb Callback to be invoked when "unsubscribe" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @pre At least one topic has been configured using @ref cc_mqtt5_##NAME##client_unsubscribe_config_topic.
/// @post The handle of the "unsubscribe" operation can be discarded.
/// @post The provided callback will be invoked when the "unsubscribe" operation is complete <b> if and only if</b>
///     the function returns @ref CC_Mqtt5ErrorCode_Success.
/// @ingroup unsubscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_send(CC_Mqtt5UnsubscribeHandle handle, CC_Mqtt5UnsubscribeCompleteCb cb, void* cbData);

/// @brief Cancel the allocated "unsubscribe" operation
/// @details In case the @ref cc_mqtt5_##NAME##client_unsubscribe_send() function was successfully called before,
///     the operation is cancelled @b without callback invocation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_unsubscribe_prepare() function.
/// @return Result code of the call.
/// @post The handle of the "unsubscribe" operation is no longer valid and must be discarded.
/// @ingroup unsubscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_cancel(CC_Mqtt5UnsubscribeHandle handle);

/// @brief Prepare, configure, and send "unsubscribe" request in one go (simple version) 
/// @details Abstracts away sequence of the following functions invocation:
///     @li @ref cc_mqtt5_##NAME##client_unsubscribe_prepare()
///     @li @ref cc_mqtt5_##NAME##client_unsubscribe_config_topic()
///     @li @ref cc_mqtt5_##NAME##client_unsubscribe_send()
///
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] topicConfig Topic configuration. Can be NULL.
/// @param[in] cb Callback to be invoked when "unsubscribe" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @ingroup unsubscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_simple(
    CC_Mqtt5ClientHandle handle,
    const CC_Mqtt5UnsubscribeTopicConfig* topicConfig,
    CC_Mqtt5UnsubscribeCompleteCb cb, 
    void* cbData);

/// @brief Prepare, configure, and send "unsubscribe" request in one go (full version) 
/// @details Abstracts away sequence of the following functions invocation:
///     @li @ref cc_mqtt5_##NAME##client_unsubscribe_prepare()
///     @li @ref cc_mqtt5_##NAME##client_unsubscribe_config_topic() (multiple times)
///     @li @ref cc_mqtt5_##NAME##client_unsubscribe_send()
///
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] topicConfigs Pointer to array of the topic configurations.
/// @param[in] topicConfigsCount Amount of the topic configurations in the array.
/// @param[in] cb Callback to be invoked when "unsubscribe" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @ingroup unsubscribe
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_unsubscribe_full(
    CC_Mqtt5ClientHandle handle,
    const CC_Mqtt5UnsubscribeTopicConfig* topicConfigs,
    unsigned topicConfigsCount,
    CC_Mqtt5UnsubscribeCompleteCb cb, 
    void* cbData);  

/// @brief Prepare "publish" operation.
/// @details For successful operation the client needs to be in the "connected" state.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[out] ec Error code reporting result of the operation. Can be NULL.
/// @return Handle of the "publish" operation, will be NULL in case of failure. To analyze the reason failure use "ec" output parameter.
/// @post The "publish" operation is allocated, use either @ref cc_mqtt5_##NAME##client_publish_send()
///     or @ref cc_mqtt5_##NAME##client_publish_cancel() to prevent memory leaks.
/// @ingroup publish
CC_Mqtt5PublishHandle cc_mqtt5_##NAME##client_publish_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec);

/// @brief Intialize the @ref CC_Mqtt5PublishBasicConfig configuration structure.
/// @param[out] config Configuration structure. Must not be NULL.
/// @ingroup publish
void cc_mqtt5_##NAME##client_publish_init_config_basic(CC_Mqtt5PublishBasicConfig* config);

/// @brief Intialize the @ref CC_Mqtt5PublishExtraConfig configuration structure.
/// @param[out] config Configuration structure. Must not be NULL.
/// @ingroup publish
void cc_mqtt5_##NAME##client_publish_init_config_extra(CC_Mqtt5PublishExtraConfig* config);

/// @brief Configure the broker response timeout for the "publish" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_publish_prepare() function.
/// @param[in] ms Response timeout duration in @b milliseconds.
/// @return Result code of the call.
/// @ingroup publish
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_set_response_timeout(CC_Mqtt5PublishHandle handle, unsigned ms);

/// @brief Retrieve the configured the broker response timeout for the "publish" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_publish_prepare() function.
/// @return Response timeout duration in @b milliseconds.
/// @ingroup publish
unsigned cc_mqtt5_##NAME##client_publish_get_response_timeout(CC_Mqtt5PublishHandle handle);

/// @brief Configure the amount of attempts to resend "publish" operation until the acknowledgement is received.
/// @details When resending a second and further time, the @b DUP flags is set in the @b PUBLISH message to indicate duplicate.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_publish_prepare() function.
/// @param[in] attempts Amount of resend attempts.
/// @return Result code of the call.
/// @ingroup publish
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_set_resend_attempts(CC_Mqtt5PublishHandle handle, unsigned attempts);

/// @brief Retrieve the configured the amount of resend attempts for the "publish" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_publish_prepare() function.
/// @return Configured amount of resend attempts.
/// @ingroup publish
unsigned cc_mqtt5_##NAME##client_publish_get_resend_attempts(CC_Mqtt5PublishHandle handle);

/// @brief Perform basic configuration of the "publish" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_publish_prepare() function.
/// @param[in] config Basic configuration structure. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @post Some of the properties can get assigned regardless of the return value.
/// @pre Mustn't be called more than once for a single "publish" operation when "topic alias" can be used.
/// @ingroup publish
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_config_basic(CC_Mqtt5PublishHandle handle, const CC_Mqtt5PublishBasicConfig* config);

/// @brief Perform extra properties configuration of the "publish" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_publish_prepare() function.
/// @param[in] config Extra properties configuration structure. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @pre Mustn't be called more than once for a single "publish" operation.
/// @post Some of the properties can get assigned regardless of the return value.
/// @ingroup publish
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_config_extra(CC_Mqtt5PublishHandle handle, const CC_Mqtt5PublishExtraConfig* config);

/// @brief Add user property to the configuration of the "publish" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_publish_prepare() function.
/// @param[in] prop Single user property info. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @ingroup publish
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_add_user_prop(CC_Mqtt5PublishHandle handle, const CC_Mqtt5UserProp* prop);

/// @brief Send the configured "publish" operation to broker
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_publish_prepare() function.
/// @param[in] cb Callback to be invoked when "publish" operation is complete, can be NULL.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. Can be NULL.
/// @return Result code of the call.
/// @post The handle of the "publish" operation can be discarded.
/// @post The provided callback will be invoked when the "publish" operation is complete <b> if and only if</b>
///     the function returns @ref CC_Mqtt5ErrorCode_Success.
/// @ingroup publish
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_send(CC_Mqtt5PublishHandle handle, CC_Mqtt5PublishCompleteCb cb, void* cbData);

/// @brief Check whether the "publish" operation was actually initiated (PUBLISH was sent)
/// @details In case the the amount of outgoing publish messages exceeds the "Receive Maximum" limit
///     set by the broker, the requested "publish" operation can be paused. This API 
///     call checks whether the @b PUBLISH message was already sent to the broker.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_publish_prepare() function.
/// @return @b true in case @b PUBLISH message has already been sent.
/// @ingroup publish
bool cc_mqtt5_##NAME##client_publish_was_initiated(CC_Mqtt5PublishHandle handle);

/// @brief Cancel the allocated "publish" operation
/// @details In case the @ref cc_mqtt5_##NAME##client_publish_send() function was successfully called before,
///     the operation is cancelled @b without callback invocation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_publish_prepare() function.
/// @return Result code of the call.
/// @post The handle of the "publish" operation is no longer valid and must be discarded.
/// @ingroup publish
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_cancel(CC_Mqtt5PublishHandle handle);

/// @brief Prepare, configure, and send "publish" request in one go (simple version) 
/// @details Abstracts away sequence of the following functions invocation:
///     @li @ref cc_mqtt5_##NAME##client_publish_prepare()
///     @li @ref cc_mqtt5_##NAME##client_publish_config_basic()
///     @li @ref cc_mqtt5_##NAME##client_publish_send()
///
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] basicConfig Basic configuration.
/// @param[in] cb Callback to be invoked when "publish" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @ingroup publish
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_simple(
    CC_Mqtt5ClientHandle handle,
    const CC_Mqtt5PublishBasicConfig* basicConfig,
    CC_Mqtt5PublishCompleteCb cb, 
    void* cbData);

/// @brief Prepare, configure, and send "publish" request in one go (full version) 
/// @details Abstracts away sequence of the following functions invocation:
///     @li @ref cc_mqtt5_##NAME##client_publish_prepare()
///     @li @ref cc_mqtt5_##NAME##client_publish_config_basic()
///     @li @ref cc_mqtt5_##NAME##client_publish_config_extra()
///     @li @ref cc_mqtt5_##NAME##client_publish_send()
///
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] basicConfig Basic configuration.
/// @param[in] extraConfig Extra configuration. Can be NULL.
/// @param[in] cb Callback to be invoked when "publish" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @ingroup publish
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_publish_full(
    CC_Mqtt5ClientHandle handle,
    const CC_Mqtt5PublishBasicConfig* basicConfig,
    const CC_Mqtt5PublishExtraConfig* extraConfig,
    CC_Mqtt5PublishCompleteCb cb, 
    void* cbData);

/// @brief Prepare "reauth" operation.
/// @details For successful operation the client needs to be in the "connected" state and 
///     there is no other incomplete "reauth" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[out] ec Error code reporting result of the operation. Can be NULL.
/// @return Handle of the "reauth" operation, will be NULL in case of failure. To analyze the reason failure use "ec" output parameter.
/// @post The "reauth" operation is allocated, use either @ref cc_mqtt5_##NAME##client_reauth_send()
///     or @ref cc_mqtt5_##NAME##client_reauth_cancel() to prevent memory leaks.
/// @ingroup reauth
CC_Mqtt5ReauthHandle cc_mqtt5_##NAME##client_reauth_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec);

/// @brief Intialize the @ref CC_Mqtt5AuthConfig configuration structure.
/// @param[out] config Configuration structure. Must not be NULL.
/// @ingroup reauth
void cc_mqtt5_##NAME##client_reauth_init_config_auth(CC_Mqtt5AuthConfig* config);

/// @brief Configure the broker response timeout for the "reauth" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_reauth_prepare() function.
/// @param[in] ms Response timeout duration in @b milliseconds.
/// @return Result code of the call.
/// @ingroup reauth
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_reauth_set_response_timeout(CC_Mqtt5ReauthHandle handle, unsigned ms);

/// @brief Retrieve the configured the broker response timeout for the "reauth" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_reauth_prepare() function.
/// @return Response timeout duration in @b milliseconds.
/// @ingroup reauth
unsigned cc_mqtt5_##NAME##client_reauth_get_response_timeout(CC_Mqtt5ReauthHandle handle);

/// @brief Perform authentication handshake configuration of the "reauth" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_reauth_prepare() function.
/// @param[in] config Authentication configuration structure. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @pre Mustn't be called more than once for a single "reauth" operation.
/// @post Some of the properties can get assigned regardless of the return value.
/// @ingroup reauth
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_reauth_config_auth(CC_Mqtt5ReauthHandle handle, const CC_Mqtt5AuthConfig* config);

/// @brief Add user property to the configuration of the "reauth" operation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_reauth_prepare() function.
/// @param[in] prop Single user property info. Must NOT be NULL. Does not need to be preserved after invocation.
/// @return Result code of the call.
/// @ingroup reauth
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_reauth_add_user_prop(CC_Mqtt5ReauthHandle handle, const CC_Mqtt5UserProp* prop);

/// @brief Send the configured "reauth" operation to broker
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_reauth_prepare() function.
/// @param[in] cb Callback to be invoked when "reauth" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @post The handle of the "reauth" operation can be discarded.
/// @post The provided callback will be invoked when the "reauth" operation is complete <b> if and only if</b>
///     the function returns @ref CC_Mqtt5ErrorCode_Success.
/// @ingroup reauth
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_reauth_send(CC_Mqtt5ReauthHandle handle, CC_Mqtt5ReauthCompleteCb cb, void* cbData);

/// @brief Cancel the allocated "reauth" operation
/// @details In case the @ref cc_mqtt5_##NAME##client_reauth_send() function was successfully called before,
///     the operation is cancelled @b without callback invocation.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_reauth_prepare() function.
/// @return Result code of the call.
/// @post The handle of the "reauth" operation is no longer valid and must be discarded.
/// @ingroup reauth
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_reauth_cancel(CC_Mqtt5ReauthHandle handle);

/// @brief Prepare, configure, and send "reauth" request in one go
/// @details Abstracts away sequence of the following functions invocation:
///     @li @ref cc_mqtt5_##NAME##client_reauth_prepare()
///     @li @ref cc_mqtt5_##NAME##client_reauth_config_auth()
///     @li @ref cc_mqtt5_##NAME##client_reauth_send()
///
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] config Auth configuration.
/// @param[in] cb Callback to be invoked when "reauth" operation is complete.
/// @param[in] cbData Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
/// @return Result code of the call.
/// @ingroup reauth
CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_reauth(
    CC_Mqtt5ClientHandle handle,
    const CC_Mqtt5AuthConfig* config,
    CC_Mqtt5ReauthCompleteCb cb, 
    void* cbData);

// --------------------- Callbacks ---------------------

/// @brief Set callback to call when time measurement is required.
/// @details The MQTT5 client may require to measure time. When such 
///     measurement is required, the provided callback will be invoked with
///     the timeout duration in milliseconds. After requested time expires,
///     the @ref cc_mqtt5_##NAME##client_tick() function must be invoked.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] cb Callback function.
/// @param[in] data Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
void cc_mqtt5_##NAME##client_set_next_tick_program_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5NextTickProgramCb cb,
    void* data);
    
/// @brief Set callback to terminate current time measurement.
/// @details The client may request termination of currently running time 
///     measurement, previously requested via callback, which was set using
///     @ref cc_mqtt5_##NAME##client_set_next_tick_program_callback() function. This function
///     sets appropriate callback. When invoked, it must return number of
///     elapsed milliseconds since previoius time measurement request.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] cb Callback function.
/// @param[in] data Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
void cc_mqtt5_##NAME##client_set_cancel_next_tick_wait_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5CancelNextTickWaitCb cb,
    void* data);
    
/// @brief Set callback to send raw data over I/O link.
/// @details The callback is invoked when there is a need to send data
///     to the broker. The callback is invoked for every single message
///     that need to be sent. 
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] cb Callback function.
/// @param[in] data Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
void cc_mqtt5_##NAME##client_set_send_output_data_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5SendOutputDataCb cb,
    void* data);

/// @brief Set callback to report unsolicited disconnection of the broker.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] cb Callback function.
/// @param[in] data Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
void cc_mqtt5_##NAME##client_set_broker_disconnect_report_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5BrokerDisconnectReportCb cb,
    void* data);

/// @brief Set callback to report received message from the broker.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] cb Callback function.
/// @param[in] data Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
void cc_mqtt5_##NAME##client_set_message_received_report_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5MessageReceivedReportCb cb,
    void* data);

/// @brief Set callback to report error messages.
/// @param[in] handle Handle returned by @ref cc_mqtt5_##NAME##client_alloc() function.
/// @param[in] cb Callback function.
/// @param[in] data Pointer to any user data structure. It will passed as one 
///     of the parameters in callback invocation. May be NULL.
void cc_mqtt5_##NAME##client_set_error_log_callback(
    CC_Mqtt5ClientHandle handle,
    CC_Mqtt5ErrorLogCb cb,
    void* data);

#ifdef __cplusplus
}
#endif
