#include "UnitTestDefaultBase.h"
#include "UnitTestPropsHandler.h"
#include "UnitTestProtocolDefs.h"

#include <cxxtest/TestSuite.h>

class UnitTestDisconnect : public CxxTest::TestSuite, public UnitTestDefaultBase
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();

private:
    virtual void setUp() override
    {
        unitTestSetUp();
    }

    virtual void tearDown() override
    {
        unitTestTearDown();
    }
};

void UnitTestDisconnect::test1()
{
    // Simple disconnect from broker
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    TS_ASSERT_DIFFERS(client, nullptr);

    unitTestPerformBasicConnect(client, __FUNCTION__);

    UnitTestDisconnectMsg disconnectMsg;
    unitTestReceiveMessage(client, disconnectMsg);

    TS_ASSERT(unitTestIsDisconnected());
    TS_ASSERT(unitTestHasDisconnectInfo());
    auto& disconnectInfo = unitTestDisconnectInfo();
    TS_ASSERT_EQUALS(disconnectInfo.m_reasonCode, CC_Mqtt5ReasonCode_NormalDisconnection);
    unitTestPopDisconnectInfo();
}

void UnitTestDisconnect::test2()
{
    // Bad reserved bits DISCONNECT from broker
    // [MQTT-3.14.1-1]
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    TS_ASSERT_DIFFERS(client, nullptr);

    unitTestPerformBasicConnect(client, __FUNCTION__);

    UnitTestDisconnectMsg disconnectMsg;
    disconnectMsg.transportField_flags().field_qos().setValue(CC_Mqtt5QoS_AtLeastOnceDelivery);
    unitTestReceiveMessage(client, disconnectMsg);

    TS_ASSERT(unitTestIsDisconnected());
    TS_ASSERT(!unitTestHasDisconnectInfo());

    unitTestVerifyDisconnectSent(UnitTestDisconnectReason::MalformedPacket);
    TS_ASSERT(unitTestIsDisconnected());        
}

void UnitTestDisconnect::test3()
{
    // Testing spec:
    // If the Session Expiry Interval in the CONNECT packet was zero, then it is a Protocol Error to set a non-
    // zero Session Expiry Interval in the DISCONNECT packet sent by the Client

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    TS_ASSERT_DIFFERS(client, nullptr);

    unitTestPerformBasicConnect(client, __FUNCTION__);

    auto config = CC_Mqtt5DisconnectConfig();
    apiDisconnectInitConfig(&config);

    unsigned expiryInterval = 10;
    config.m_sessionExpiryInterval = &expiryInterval;

    auto* disconnect = apiDisconnectPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(disconnect, nullptr);
    auto ec = apiDisconnectConfig(disconnect, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);
}

void UnitTestDisconnect::test4()
{
    // Testing rejection any operation (except connect) after disconnect
    // [MQTT-3.14.4-1]

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    TS_ASSERT_DIFFERS(client, nullptr);

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    auto config = CC_Mqtt5DisconnectConfig();
    apiDisconnectInitConfig(&config);
    unitTestPerformDisconnect(client, &config);

    TS_ASSERT(!apiIsConnected(client));

    CC_Mqtt5ErrorCode ec = CC_Mqtt5ErrorCode_Success;
    auto* subscribe = apiSubscribePrepare(client, &ec);
    TS_ASSERT_EQUALS(subscribe, nullptr);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_NotConnected);

    auto* unsubscribe = apiUnsubscribePrepare(client, &ec);
    TS_ASSERT_EQUALS(unsubscribe, nullptr);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_NotConnected);    

    auto* publish = apiPublishPrepare(client, &ec);
    TS_ASSERT_EQUALS(publish, nullptr);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_NotConnected);       

    auto* disconnect = apiDisconnectPrepare(client, &ec);
    TS_ASSERT_EQUALS(disconnect, nullptr);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_NotConnected);       
}

void UnitTestDisconnect::test5()
{
    // Testing DISCONNECT message and network disconnection that follows

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    TS_ASSERT_DIFFERS(client, nullptr);

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestTick(client, 100);
    UnitTestDisconnectMsg disconnectMsg;
    unitTestReceiveMessage(client, disconnectMsg);

    TS_ASSERT(unitTestIsDisconnected());
    TS_ASSERT(unitTestHasDisconnectInfo());
    auto& disconnectInfo = unitTestDisconnectInfo();
    TS_ASSERT_EQUALS(disconnectInfo.m_reasonCode, CC_Mqtt5ReasonCode_NormalDisconnection);
    unitTestPopDisconnectInfo();    
    TS_ASSERT(unitTestCheckNoTicks());

    apiNotifyNetworkDisconnected(client);
}