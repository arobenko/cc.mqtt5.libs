#include "UnitTestQos1Base.h"
#include "UnitTestPropsHandler.h"
#include "UnitTestProtocolDefs.h"

#include <cxxtest/TestSuite.h>

class UnitTestQos1Publish : public CxxTest::TestSuite, public UnitTestQos1Base
{
public:
    void test1();

private:
    virtual void setUp() override
    {
        unitTestSetUp();
    }

    virtual void tearDown() override
    {
        unitTestTearDown();
    }
};

void UnitTestQos1Publish::test1()
{
    // Rejecting Qos2 configuration
    auto* client = unitTestAllocClient();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(unitTestIsConnected(client));

    auto* publish = unitTestPublishPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(publish, nullptr);
    TS_ASSERT_EQUALS(unitTestPublishCount(client), 1U);

    const std::string Topic("some/topic");
    const UnitTestData Data = { 0x1, 0x2, 0x3, 0x4, 0x5};

    auto config = CC_Mqtt5PublishBasicConfig();
    unitTestPublishInitConfigBasic(&config);

    config.m_topic = Topic.c_str();
    config.m_data = &Data[0];
    config.m_dataLen = static_cast<decltype(config.m_dataLen)>(Data.size());
    config.m_qos = CC_Mqtt5QoS_ExactlyOnceDelivery;

    auto ec = unitTestPublishConfigBasic(publish, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);

    config.m_qos = CC_Mqtt5QoS_AtLeastOnceDelivery;
    ec = unitTestPublishConfigBasic(publish, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    ec = unitTestSendPublish(publish);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
    TS_ASSERT(!unitTestIsPublishComplete());

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Publish);    
    auto* publishMsg = dynamic_cast<UnitTestPublishMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(publishMsg, nullptr);

    TS_ASSERT_EQUALS(static_cast<CC_Mqtt5QoS>(publishMsg->transportField_flags().field_qos().value()), CC_Mqtt5QoS_AtLeastOnceDelivery);
    TS_ASSERT_EQUALS(publishMsg->field_topic().value(), Topic);
    TS_ASSERT(publishMsg->field_packetId().doesExist());
    TS_ASSERT_EQUALS(publishMsg->field_payload().value(), Data);

    unitTestTick(1000);
    UnitTestPubackMsg pubackMsg;
    pubackMsg.field_packetId().value() = publishMsg->field_packetId().field().value();
    unitTestReceiveMessage(pubackMsg); 

    TS_ASSERT(unitTestIsPublishComplete());
    auto& pubackInfo = unitTestPublishResponseInfo();
    TS_ASSERT_EQUALS(pubackInfo.m_status, CC_Mqtt5AsyncOpStatus_Complete);
    unitTestPopPublishResponseInfo();       
}
