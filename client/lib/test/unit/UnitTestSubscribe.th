#include "UnitTestDefaultBase.h"
#include "UnitTestPropsHandler.h"
#include "UnitTestProtocolDefs.h"

#include <cxxtest/TestSuite.h>

class UnitTestSubscribe : public CxxTest::TestSuite, public UnitTestDefaultBase
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    

private:
    virtual void setUp() override
    {
        unitTestSetUp();
    }

    virtual void tearDown() override
    {
        unitTestTearDown();
    }
};

void UnitTestSubscribe::test1()
{
    // Simple subscribe and ack
    // [MQTT-3.8.4-5]
    auto* client = unitTestAllocClient();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(unitTestIsConnected(client));

    auto* tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq->m_requested, 60000); // default keep alive


    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    const std::string SubTopic1 = "/sub/topic/1";
    const CC_Mqtt5QoS SubQos1 = CC_Mqtt5QoS_AtLeastOnceDelivery;
    const CC_Mqtt5RetainHandling SubRetainHandling1 = CC_Mqtt5RetainHandling_SendIfDoesNotExist;
    const bool SubNoLocal1 = true;
    const bool SubRetainAsPublish1 = true;
    auto subscribeConfig1 = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&subscribeConfig1);
    TS_ASSERT_EQUALS(subscribeConfig1.m_maxQos, CC_Mqtt5QoS_ExactlyOnceDelivery);
    subscribeConfig1.m_topic = SubTopic1.c_str();
    subscribeConfig1.m_maxQos = SubQos1;
    subscribeConfig1.m_retainHandling = SubRetainHandling1;
    subscribeConfig1.m_noLocal = SubNoLocal1;
    subscribeConfig1.m_retainAsPublished = SubRetainAsPublish1;
    auto ec = unitTestSubscribeConfigTopic(subscribe, &subscribeConfig1);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    const std::string SubTopic2 = "/sub/topic/2";
    const CC_Mqtt5QoS SubQos2 = CC_Mqtt5QoS_ExactlyOnceDelivery;
    const CC_Mqtt5RetainHandling SubRetainHandling2 = CC_Mqtt5RetainHandling_DoNotSend;
    const bool SubNoLocal2 = true;
    const bool SubRetainAsPublish2 = false;
    auto subscribeConfig2 = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&subscribeConfig2);
    TS_ASSERT_EQUALS(subscribeConfig2.m_maxQos, CC_Mqtt5QoS_ExactlyOnceDelivery);
    subscribeConfig2.m_topic = SubTopic2.c_str();
    subscribeConfig2.m_maxQos = SubQos2;
    subscribeConfig2.m_retainHandling = SubRetainHandling2;
    subscribeConfig2.m_noLocal = SubNoLocal2;
    subscribeConfig2.m_retainAsPublished = SubRetainAsPublish2;
    ec = unitTestSubscribeConfigTopic(subscribe, &subscribeConfig2);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    ec = unitTestSendSubscribe(subscribe);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
    TS_ASSERT(!unitTestIsSubscribeComplete());

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Subscribe);    
    auto* subscribeMsg = dynamic_cast<UnitTestSubscribeMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(subscribeMsg, nullptr);
    TS_ASSERT(subscribeMsg->field_properties().value().empty());
    TS_ASSERT_EQUALS(subscribeMsg->field_list().value().size(), 2U);
    auto& elem0 = subscribeMsg->field_list().value()[0];
    auto& elem1 = subscribeMsg->field_list().value()[1];
    TS_ASSERT_EQUALS(elem0.field_topic().value(), SubTopic1);
    TS_ASSERT_EQUALS(static_cast<CC_Mqtt5QoS>(elem0.field_options().field_qos().value()), SubQos1);
    TS_ASSERT_EQUALS(elem0.field_options().field_bits().getBitValue_NL(), SubNoLocal1);
    TS_ASSERT_EQUALS(elem0.field_options().field_bits().getBitValue_RAP(), SubRetainAsPublish1);
    TS_ASSERT_EQUALS(static_cast<CC_Mqtt5RetainHandling>(elem0.field_options().field_retainHandling().value()), SubRetainHandling1);
    TS_ASSERT_EQUALS(elem1.field_topic().value(), SubTopic2);
    TS_ASSERT_EQUALS(static_cast<CC_Mqtt5QoS>(elem1.field_options().field_qos().value()), SubQos2);
    TS_ASSERT_EQUALS(elem1.field_options().field_bits().getBitValue_NL(), SubNoLocal2);
    TS_ASSERT_EQUALS(elem1.field_options().field_bits().getBitValue_RAP(), SubRetainAsPublish2);
    TS_ASSERT_EQUALS(static_cast<CC_Mqtt5RetainHandling>(elem1.field_options().field_retainHandling().value()), SubRetainHandling2);

    unitTestTick(1000);
    UnitTestSubackMsg subackMsg;
    subackMsg.field_packetId().value() = subscribeMsg->field_packetId().value();
    subackMsg.field_list().value().resize(2);
    subackMsg.field_list().value()[0].setValue(CC_Mqtt5ReasonCode_GrantedQos1);
    subackMsg.field_list().value()[1].setValue(CC_Mqtt5ReasonCode_GrantedQos2);
    unitTestReceiveMessage(subackMsg);
    TS_ASSERT(unitTestIsSubscribeComplete());

    auto& subackInfo = unitTestSubscribeResponseInfo();
    TS_ASSERT_EQUALS(subackInfo.m_status, CC_Mqtt5AsyncOpStatus_Complete);
    TS_ASSERT_EQUALS(subackInfo.m_response.m_reasonCodes.size(), 2U);
    TS_ASSERT_EQUALS(subackInfo.m_response.m_reasonCodes[0], CC_Mqtt5ReasonCode_GrantedQos1);
    TS_ASSERT_EQUALS(subackInfo.m_response.m_reasonCodes[1], CC_Mqtt5ReasonCode_GrantedQos2);
    TS_ASSERT(subackInfo.m_response.m_reasonStr.empty());
    TS_ASSERT(subackInfo.m_response.m_userProps.empty());
    unitTestPopSubscribeResponseInfo();
}

void UnitTestSubscribe::test2()
{
    // Parallel subscribe
    auto* client = unitTestAllocClient(true);
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(unitTestIsConnected(client));
    
    auto* tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq->m_requested, 60000); // Default keep alive

    auto subscribe1 = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe1, nullptr);

    const std::string SubTopic1 = "/sub/topic/1";
    const CC_Mqtt5QoS SubQos1 = CC_Mqtt5QoS_AtLeastOnceDelivery;
    const CC_Mqtt5RetainHandling SubRetainHandling1 = CC_Mqtt5RetainHandling_SendIfDoesNotExist;
    const bool SubNoLocal1 = true;
    const bool SubRetainAsPublish1 = true;
    const unsigned SubId1 = 100;
    const std::string SubUserPropKey1 = "Key1";
    const std::string SubUserPropVal1 = "Val1";
    auto subscribeConfig1 = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&subscribeConfig1);
    TS_ASSERT_EQUALS(subscribeConfig1.m_maxQos, CC_Mqtt5QoS_ExactlyOnceDelivery);
    subscribeConfig1.m_topic = SubTopic1.c_str();
    subscribeConfig1.m_maxQos = SubQos1;
    subscribeConfig1.m_retainHandling = SubRetainHandling1;
    subscribeConfig1.m_noLocal = SubNoLocal1;
    subscribeConfig1.m_retainAsPublished = SubRetainAsPublish1;
    auto ec = unitTestSubscribeConfigTopic(subscribe1, &subscribeConfig1);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    auto subcribeExtra1 = CC_Mqtt5SubscribeExtraConfig();
    unitTestSubscribeInitConfigExtra(&subcribeExtra1);
    subcribeExtra1.m_subId = SubId1;
    ec = unitTestSubscribeConfigExtra(subscribe1, &subcribeExtra1);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    auto userProp1 = CC_Mqtt5UserProp();
    userProp1.m_key = SubUserPropKey1.c_str();
    userProp1.m_value = SubUserPropVal1.c_str();
    ec = unitTestSubscribeAddUserProp(subscribe1, &userProp1);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    ec = unitTestSendSubscribe(subscribe1);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
    TS_ASSERT(!unitTestIsSubscribeComplete());

    auto sentMsg1 = unitTestGetSentMessage();
    TS_ASSERT(sentMsg1);
    TS_ASSERT_EQUALS(sentMsg1->getId(), cc_mqtt5::MsgId_Subscribe);    
    auto* subscribeMsg1 = dynamic_cast<UnitTestSubscribeMsg*>(sentMsg1.get());

    UnitTestPropsHandler propsHandler1;
    for (auto& p : subscribeMsg1->field_properties().value()) {
        p.currentFieldExec(propsHandler1);
    }

    TS_ASSERT_EQUALS(propsHandler1.m_subscriptionIds.size(), 1U);    
    TS_ASSERT_EQUALS(propsHandler1.m_subscriptionIds[0]->field_value().value(), SubId1);    
    TS_ASSERT_EQUALS(propsHandler1.m_userProps.size(), 1U);    
    TS_ASSERT_EQUALS(propsHandler1.m_userProps[0]->field_value().field_first().value(), SubUserPropKey1);    
    TS_ASSERT_EQUALS(propsHandler1.m_userProps[0]->field_value().field_second().value(), SubUserPropVal1);    

    auto subscribe2 = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe2, nullptr);

    const std::string SubTopic2 = "/sub/topic/2";
    const CC_Mqtt5QoS SubQos2 = CC_Mqtt5QoS_ExactlyOnceDelivery;
    const CC_Mqtt5RetainHandling SubRetainHandling2 = CC_Mqtt5RetainHandling_DoNotSend;
    const bool SubNoLocal2 = true;
    const bool SubRetainAsPublish2 = false;
    auto subscribeConfig2 = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&subscribeConfig2);
    TS_ASSERT_EQUALS(subscribeConfig2.m_maxQos, CC_Mqtt5QoS_ExactlyOnceDelivery);
    subscribeConfig2.m_topic = SubTopic2.c_str();
    subscribeConfig2.m_maxQos = SubQos2;
    subscribeConfig2.m_retainHandling = SubRetainHandling2;
    subscribeConfig2.m_noLocal = SubNoLocal2;
    subscribeConfig2.m_retainAsPublished = SubRetainAsPublish2;
    ec = unitTestSubscribeConfigTopic(subscribe2, &subscribeConfig2);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    ec = unitTestSendSubscribe(subscribe2);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
    TS_ASSERT(!unitTestIsSubscribeComplete());

    auto sentMsg2 = unitTestGetSentMessage();
    TS_ASSERT(sentMsg2);
    TS_ASSERT_EQUALS(sentMsg2->getId(), cc_mqtt5::MsgId_Subscribe);    
    auto* subscribeMsg2 = dynamic_cast<UnitTestSubscribeMsg*>(sentMsg2.get());
    TS_ASSERT_DIFFERS(subscribeMsg2, nullptr);
    TS_ASSERT_DIFFERS(subscribeMsg1->field_packetId().value(), subscribeMsg2->field_packetId().value());
    
    unitTestTick(1000);
    UnitTestSubackMsg subackMsg1;
    subackMsg1.field_packetId().value() = subscribeMsg1->field_packetId().value();
    subackMsg1.field_list().value().resize(1);
    subackMsg1.field_list().value()[0].setValue(CC_Mqtt5ReasonCode_ServerBusy);
    unitTestReceiveMessage(subackMsg1);
    TS_ASSERT(unitTestIsSubscribeComplete());

    auto& subackInfo = unitTestSubscribeResponseInfo();
    TS_ASSERT_EQUALS(subackInfo.m_status, CC_Mqtt5AsyncOpStatus_Complete);
    TS_ASSERT_EQUALS(subackInfo.m_response.m_reasonCodes.size(), 1U);
    TS_ASSERT_EQUALS(subackInfo.m_response.m_reasonCodes[0], CC_Mqtt5ReasonCode_ServerBusy);
    unitTestPopSubscribeResponseInfo();

    TS_ASSERT(!unitTestIsSubscribeComplete());
    unitTestTick(); // Timeout of the op
    TS_ASSERT(unitTestIsSubscribeComplete());
    TS_ASSERT_EQUALS(subackInfo.m_status, CC_Mqtt5AsyncOpStatus_Timeout);
}

void UnitTestSubscribe::test3()
{
    // Invalid subscribe topics
    // [MQTT-3.8.3-2]
    // [MQTT-4.7.1-1]
    // [MQTT-4.7.1-2]
    // [MQTT-4.7.3-1]
    // [MQTT-4.8.2-1]

    auto* client = unitTestAllocClient();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(unitTestIsConnected(client));

    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    auto config = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&config);

    config.m_topic = "++";
    auto ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);

    config.m_topic = "#+";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);    

    config.m_topic = "#/hello";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);     

    config.m_topic = "hello+/bla";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);     

    config.m_topic = "#hello";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);     

    config.m_topic = "+hello";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);     

    config.m_topic = "";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);    

    config.m_topic = "$share/";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);     

    config.m_topic = "$share//";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);     

    config.m_topic = "$share/#";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);      

    config.m_topic = "$share/+";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);    

    config.m_topic = "$share/ShareName";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);   

    config.m_topic = "$share/ShareName/";
    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);         

    ec = unitTestSendSubscribe(subscribe);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_InsufficientConfig);
}

void UnitTestSubscribe::test4()
{
    // Testing invalid suback;
    // [MQTT-2.2.1-6]

    auto* client = unitTestAllocClient();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(unitTestIsConnected(client));

    auto config = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&config);
    TS_ASSERT_EQUALS(config.m_maxQos, CC_Mqtt5QoS_ExactlyOnceDelivery);
    config.m_topic = "/sub/topic/1";

    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    auto ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    ec = unitTestSendSubscribe(subscribe);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
    TS_ASSERT(!unitTestIsSubscribeComplete());

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Subscribe);    
    auto* subscribeMsg = dynamic_cast<UnitTestSubscribeMsg*>(sentMsg.get());
    auto packetId = subscribeMsg->field_packetId().value();

    unitTestTick(1000);
    UnitTestSubackMsg subackMsg;
    subackMsg.field_packetId().setValue(packetId + 1U);
    subackMsg.field_list().value().resize(1);
    subackMsg.field_list().value()[0].setValue(CC_Mqtt5ReasonCode_Success);
    unitTestReceiveMessage(subackMsg);
    TS_ASSERT(!unitTestIsSubscribeComplete());

    unitTestTick(); // Timeout
    TS_ASSERT(unitTestIsSubscribeComplete());

    auto& subackInfo = unitTestSubscribeResponseInfo();
    TS_ASSERT_EQUALS(subackInfo.m_status, CC_Mqtt5AsyncOpStatus_Timeout);
    unitTestPopSubscribeResponseInfo();
}

void UnitTestSubscribe::test5()
{
    // Canceling subscribe operation when network is disconnected 
    // [MQTT-3.1.2-23]

    auto* client = unitTestAllocClient();

    const unsigned SessionExpiryInterval = 10;
    unitTestPerformSessionExpiryConnect(client, __FUNCTION__, SessionExpiryInterval);
    TS_ASSERT(unitTestIsConnected(client));

    auto config = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&config);
    TS_ASSERT_EQUALS(config.m_maxQos, CC_Mqtt5QoS_ExactlyOnceDelivery);
    config.m_topic = "/sub/topic/1";

    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    const unsigned ResponseTimeout = 2000;
    auto ec = unitTestSubscribeSetResponseTimeout(subscribe, ResponseTimeout);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    ec = unitTestSendSubscribe(subscribe);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
    TS_ASSERT(!unitTestIsSubscribeComplete());

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Subscribe);    
    auto* subscribeMsg = dynamic_cast<UnitTestSubscribeMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(subscribeMsg, nullptr);

    auto* tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq->m_requested, ResponseTimeout);

    unitTestTick(1000);
    unitTestNotifyNetworkDisconnected(client);
    TS_ASSERT(!unitTestIsDisconnected());

    TS_ASSERT(unitTestIsSubscribeComplete());
    auto& subackInfo = unitTestSubscribeResponseInfo();
    TS_ASSERT_EQUALS(subackInfo.m_status, CC_Mqtt5AsyncOpStatus_BrokerDisconnected);
    unitTestPopSubscribeResponseInfo();
}

void UnitTestSubscribe::test6()
{
    // Testing properties in SUBACK

    auto* client = unitTestAllocClient();

    auto basicConfig = CC_Mqtt5ConnectBasicConfig();
    unitTestConnectInitConfigBasic(&basicConfig);
    basicConfig.m_clientId = __FUNCTION__;
    basicConfig.m_cleanStart = true;

    auto extraConfig = CC_Mqtt5ConnectExtraConfig();
    unitTestConnectInitConfigExtra(&extraConfig);
    extraConfig.m_requestProblemInfo = true;

    unitTestPerformConnect(client, &basicConfig, nullptr, &extraConfig);
    TS_ASSERT(unitTestIsConnected(client));

    auto config = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&config);
    TS_ASSERT_EQUALS(config.m_maxQos, CC_Mqtt5QoS_ExactlyOnceDelivery);
    config.m_topic = "/sub/topic/1";

    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    auto ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    ec = unitTestSendSubscribe(subscribe);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
    TS_ASSERT(!unitTestIsSubscribeComplete());

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Subscribe);    
    auto* subscribeMsg = dynamic_cast<UnitTestSubscribeMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(subscribeMsg, nullptr);

    const std::string ReasonStr("ReasonStr");
    const std::string SubackUserPropKey1 = "Key1";
    const std::string SubackUserPropVal1 = "Val1";

    UnitTestSubackMsg subackMsg;
    subackMsg.field_packetId().value() = subscribeMsg->field_packetId().value();
    subackMsg.field_list().value().resize(1);
    subackMsg.field_list().value()[0].setValue(CC_Mqtt5ReasonCode_Success);
    auto& propsVec = subackMsg.field_properties().value();
    do {
        propsVec.resize(propsVec.size() + 1U);
        auto& field = propsVec.back().initField_reasonStr();
        field.field_value().value() = ReasonStr;
    } while (false);

    do {
        propsVec.resize(propsVec.size() + 1U);
        auto& field = propsVec.back().initField_userProperty();
        field.field_value().field_first().value() = SubackUserPropKey1;
        field.field_value().field_second().value() = SubackUserPropVal1;
    } while (false);    

    unitTestReceiveMessage(subackMsg);
    TS_ASSERT(unitTestIsSubscribeComplete());

    auto& subackInfo = unitTestSubscribeResponseInfo();
    TS_ASSERT_EQUALS(subackInfo.m_status, CC_Mqtt5AsyncOpStatus_Complete);
    TS_ASSERT_EQUALS(subackInfo.m_response.m_reasonCodes.size(), 1U);
    TS_ASSERT_EQUALS(subackInfo.m_response.m_reasonCodes[0], CC_Mqtt5ReasonCode_Success);
    TS_ASSERT_EQUALS(subackInfo.m_response.m_reasonStr, ReasonStr);
    TS_ASSERT_EQUALS(subackInfo.m_response.m_userProps.size(), 1U);
    TS_ASSERT_EQUALS(subackInfo.m_response.m_userProps[0].m_key, SubackUserPropKey1);
    TS_ASSERT_EQUALS(subackInfo.m_response.m_userProps[0].m_value, SubackUserPropVal1);
    unitTestPopSubscribeResponseInfo();    
}

void UnitTestSubscribe::test7()
{
    // Testing rejection of "Reason String" in SUBACK
    // [MQTT-3.1.2-29]

    auto* client = unitTestAllocClient();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(unitTestIsConnected(client));

    auto config = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&config);
    TS_ASSERT_EQUALS(config.m_maxQos, CC_Mqtt5QoS_ExactlyOnceDelivery);
    config.m_topic = "/sub/topic/1";

    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    auto ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    ec = unitTestSendSubscribe(subscribe);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
    TS_ASSERT(!unitTestIsSubscribeComplete());

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Subscribe);    
    auto* subscribeMsg = dynamic_cast<UnitTestSubscribeMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(subscribeMsg, nullptr);

    const std::string ReasonStr("ReasonStr");

    UnitTestSubackMsg subackMsg;
    subackMsg.field_packetId().value() = subscribeMsg->field_packetId().value();
    subackMsg.field_list().value().resize(1);
    subackMsg.field_list().value()[0].setValue(CC_Mqtt5ReasonCode_Success);
    auto& propsVec = subackMsg.field_properties().value();
    do {
        propsVec.resize(propsVec.size() + 1U);
        auto& field = propsVec.back().initField_reasonStr();
        field.field_value().value() = ReasonStr;
    } while (false);

    unitTestReceiveMessage(subackMsg);
    
    TS_ASSERT(unitTestIsSubscribeComplete());

    auto& subackInfo = unitTestSubscribeResponseInfo();
    TS_ASSERT_EQUALS(subackInfo.m_status, CC_Mqtt5AsyncOpStatus_ProtocolError);
    unitTestPopSubscribeResponseInfo();    

    unitTestVerifyDisconnectSent(UnitTestDisconnectReason::ProtocolError);
    TS_ASSERT(unitTestIsDisconnected());    
}

void UnitTestSubscribe::test8()
{
    // Testing rejection of "User properties" in SUBACK
    // [MQTT-3.1.2-29]

    auto* client = unitTestAllocClient();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(unitTestIsConnected(client));

    auto config = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&config);
    TS_ASSERT_EQUALS(config.m_maxQos, CC_Mqtt5QoS_ExactlyOnceDelivery);
    config.m_topic = "/sub/topic/1";

    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    auto ec = unitTestSubscribeConfigTopic(subscribe, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    ec = unitTestSendSubscribe(subscribe);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
    TS_ASSERT(!unitTestIsSubscribeComplete());

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Subscribe);    
    auto* subscribeMsg = dynamic_cast<UnitTestSubscribeMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(subscribeMsg, nullptr);

    const std::string SubackUserPropKey1 = "Key1";
    const std::string SubackUserPropVal1 = "Val1";

    UnitTestSubackMsg subackMsg;
    subackMsg.field_packetId().value() = subscribeMsg->field_packetId().value();
    subackMsg.field_list().value().resize(1);
    subackMsg.field_list().value()[0].setValue(CC_Mqtt5ReasonCode_Success);
    auto& propsVec = subackMsg.field_properties().value();
    do {
        propsVec.resize(propsVec.size() + 1U);
        auto& field = propsVec.back().initField_userProperty();
        field.field_value().field_first().value() = SubackUserPropKey1;
        field.field_value().field_second().value() = SubackUserPropVal1;
    } while (false);    

    unitTestReceiveMessage(subackMsg);
    TS_ASSERT(unitTestIsSubscribeComplete());

    auto& subackInfo = unitTestSubscribeResponseInfo();
    TS_ASSERT_EQUALS(subackInfo.m_status, CC_Mqtt5AsyncOpStatus_ProtocolError);
    unitTestPopSubscribeResponseInfo();    

    unitTestVerifyDisconnectSent(UnitTestDisconnectReason::ProtocolError);
    TS_ASSERT(unitTestIsDisconnected());    
}

void UnitTestSubscribe::test9()
{
    // Testing wildcard subscriptions disabled

    auto* client = unitTestAllocClient();

    auto basicConfig = CC_Mqtt5ConnectBasicConfig();
    unitTestConnectInitConfigBasic(&basicConfig);
    basicConfig.m_clientId = __FUNCTION__;
    basicConfig.m_cleanStart = true;

    bool wildcardSubAvailable = false;
    UnitTestConnectResponseConfig responseConfig;
    responseConfig.m_wildcardSubAvailable = &wildcardSubAvailable;

    unitTestPerformConnect(client, &basicConfig, nullptr, nullptr, nullptr, &responseConfig);

    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    auto subscribeConfig = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&subscribeConfig);
    subscribeConfig.m_topic = "#";

    auto ec = unitTestSubscribeConfigTopic(subscribe, &subscribeConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);

    subscribeConfig.m_topic = "hello/#";
    ec = unitTestSubscribeConfigTopic(subscribe, &subscribeConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);

    subscribeConfig.m_topic = "hello/+";
    ec = unitTestSubscribeConfigTopic(subscribe, &subscribeConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);

    subscribeConfig.m_topic = "hello/1";
    ec = unitTestSubscribeConfigTopic(subscribe, &subscribeConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
}

void UnitTestSubscribe::test10()
{
    // Testing subscription IDs disabled

    auto* client = unitTestAllocClient();

    auto basicConfig = CC_Mqtt5ConnectBasicConfig();
    unitTestConnectInitConfigBasic(&basicConfig);
    basicConfig.m_clientId = __FUNCTION__;
    basicConfig.m_cleanStart = true;

    bool subIdsAvailable = false;
    UnitTestConnectResponseConfig responseConfig;
    responseConfig.m_subIdsAvailable = &subIdsAvailable;

    unitTestPerformConnect(client, &basicConfig, nullptr, nullptr, nullptr, &responseConfig);

    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    auto topicConfig = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&topicConfig);
    topicConfig.m_topic = "#";

    auto ec = unitTestSubscribeConfigTopic(subscribe, &topicConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    auto extraConfig = CC_Mqtt5SubscribeExtraConfig();
    unitTestSubscribeInitConfigExtra(&extraConfig);
    extraConfig.m_subId = 10;

    ec = unitTestSubscribeConfigExtra(subscribe, &extraConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);    
}

void UnitTestSubscribe::test11()
{
    // Testing shared subscriptions disabled

    auto* client = unitTestAllocClient();

    auto basicConfig = CC_Mqtt5ConnectBasicConfig();
    unitTestConnectInitConfigBasic(&basicConfig);
    basicConfig.m_clientId = __FUNCTION__;
    basicConfig.m_cleanStart = true;

    bool sharedSubsAvailable = false;
    UnitTestConnectResponseConfig responseConfig;
    responseConfig.m_sharedSubsAvailable = &sharedSubsAvailable;

    unitTestPerformConnect(client, &basicConfig, nullptr, nullptr, nullptr, &responseConfig);
    TS_ASSERT(unitTestIsConnected(client));

    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    auto topicConfig = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&topicConfig);
    topicConfig.m_topic = "$share/ShareName/#";

    auto ec = unitTestSubscribeConfigTopic(subscribe, &topicConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);
}

void UnitTestSubscribe::test12()
{
    // Testing rejection of the "No Local" bit set for shared subscriptions
    // [MQTT-3.8.3-4]

    auto* client = unitTestAllocClient();

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(unitTestIsConnected(client));

    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    auto topicConfig = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&topicConfig);
    topicConfig.m_topic = "$share/ShareName/#";
    topicConfig.m_noLocal = true;

    auto ec = unitTestSubscribeConfigTopic(subscribe, &topicConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);    
}

void UnitTestSubscribe::test13()
{
    // Simple SUBACK with wrong number of reason codes
    // [MQTT-3.8.4-6]
    auto* client = unitTestAllocClient();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(unitTestIsConnected(client));

    auto* tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq->m_requested, 60000); // default keep alive

    auto subscribe = unitTestSubscribePrepare(client, nullptr);
    TS_ASSERT_DIFFERS(subscribe, nullptr);

    const std::string SubTopic1 = "/sub/topic/1";
    const CC_Mqtt5QoS SubQos1 = CC_Mqtt5QoS_AtLeastOnceDelivery;

    auto subscribeConfig1 = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&subscribeConfig1);
    TS_ASSERT_EQUALS(subscribeConfig1.m_maxQos, CC_Mqtt5QoS_ExactlyOnceDelivery);
    subscribeConfig1.m_topic = SubTopic1.c_str();
    subscribeConfig1.m_maxQos = SubQos1;
    auto ec = unitTestSubscribeConfigTopic(subscribe, &subscribeConfig1);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    const std::string SubTopic2 = "/sub/topic/2";
    const CC_Mqtt5QoS SubQos2 = CC_Mqtt5QoS_ExactlyOnceDelivery;
    auto subscribeConfig2 = CC_Mqtt5SubscribeTopicConfig();
    unitTestSubscribeInitConfigTopic(&subscribeConfig2);
    TS_ASSERT_EQUALS(subscribeConfig2.m_maxQos, CC_Mqtt5QoS_ExactlyOnceDelivery);
    subscribeConfig2.m_topic = SubTopic2.c_str();
    subscribeConfig2.m_maxQos = SubQos2;
    ec = unitTestSubscribeConfigTopic(subscribe, &subscribeConfig2);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    ec = unitTestSendSubscribe(subscribe);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
    TS_ASSERT(!unitTestIsSubscribeComplete());

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Subscribe);    
    auto* subscribeMsg = dynamic_cast<UnitTestSubscribeMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(subscribeMsg, nullptr);
    TS_ASSERT(subscribeMsg->field_properties().value().empty());
    TS_ASSERT_EQUALS(subscribeMsg->field_list().value().size(), 2U);
    auto& elem0 = subscribeMsg->field_list().value()[0];
    auto& elem1 = subscribeMsg->field_list().value()[1];
    TS_ASSERT_EQUALS(elem0.field_topic().value(), SubTopic1);
    TS_ASSERT_EQUALS(static_cast<CC_Mqtt5QoS>(elem0.field_options().field_qos().value()), SubQos1);
    TS_ASSERT_EQUALS(elem1.field_topic().value(), SubTopic2);
    TS_ASSERT_EQUALS(static_cast<CC_Mqtt5QoS>(elem1.field_options().field_qos().value()), SubQos2);

    unitTestTick(1000);
    UnitTestSubackMsg subackMsg;
    subackMsg.field_packetId().value() = subscribeMsg->field_packetId().value();
    subackMsg.field_list().value().resize(1);
    subackMsg.field_list().value()[0].setValue(CC_Mqtt5ReasonCode_Success);
    unitTestReceiveMessage(subackMsg);
    TS_ASSERT(unitTestIsSubscribeComplete());

    auto& subackInfo = unitTestSubscribeResponseInfo();
    TS_ASSERT_EQUALS(subackInfo.m_status, CC_Mqtt5AsyncOpStatus_ProtocolError);
    unitTestPopSubscribeResponseInfo();

    unitTestVerifyDisconnectSent(UnitTestDisconnectReason::ProtocolError);
    TS_ASSERT(unitTestIsDisconnected());       
}

void UnitTestSubscribe::test14()
{
    // Testing Qos2 subscription when broker doesn't support Qos2 publish.
    // [MQTT-3.8.4-6]

    auto* client = unitTestAllocClient();

    auto basicConfig = CC_Mqtt5ConnectBasicConfig();
    unitTestConnectInitConfigBasic(&basicConfig);
    basicConfig.m_clientId = __FUNCTION__;
    basicConfig.m_cleanStart = true;

    UnitTestConnectResponseConfig responseConfig;
    responseConfig.m_maxQos = CC_Mqtt5QoS_AtMostOnceDelivery;

    unitTestPerformConnect(client, &basicConfig, nullptr, nullptr, nullptr, &responseConfig);

    unitTestPerformBasicSubscribe(client, "#");
}