//
// Copyright 2023 - 2024 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include "##NAME##client.h"
#include "ClientAllocator.h"
#include "ExtConfig.h"

#include "op/ConnectOp.h"
#include "op/DisconnectOp.h"

struct CC_Mqtt5Client {};
struct CC_Mqtt5Connect {};
struct CC_Mqtt5Disconnect {};

namespace
{

cc_mqtt5_client::ClientAllocator& getClientAllocator()
{
    static cc_mqtt5_client::ClientAllocator Allocator;
    return Allocator;
}

inline cc_mqtt5_client::Client* clientFromHandle(CC_Mqtt5ClientHandle handle)
{
    return reinterpret_cast<cc_mqtt5_client::Client*>(handle);
}

inline CC_Mqtt5ClientHandle handleFromClient(cc_mqtt5_client::Client* client)
{
    return reinterpret_cast<CC_Mqtt5ClientHandle>(client);
}

inline cc_mqtt5_client::op::ConnectOp* connectOpFromHandle(CC_Mqtt5ConnectHandle handle)
{
    return reinterpret_cast<cc_mqtt5_client::op::ConnectOp*>(handle);
}

inline CC_Mqtt5ConnectHandle handleFromConnectOp(cc_mqtt5_client::op::ConnectOp* op)
{
    return reinterpret_cast<CC_Mqtt5ConnectHandle>(op);
}

inline cc_mqtt5_client::op::DisconnectOp* disconnectOpFromHandle(CC_Mqtt5DisconnectHandle handle)
{
    return reinterpret_cast<cc_mqtt5_client::op::DisconnectOp*>(handle);
}

inline CC_Mqtt5DisconnectHandle handleFromDisconnectOp(cc_mqtt5_client::op::DisconnectOp* op)
{
    return reinterpret_cast<CC_Mqtt5DisconnectHandle>(op);
}

} // namespace

CC_Mqtt5ClientHandle cc_mqtt5_##NAME##client_new()
{
    auto client = getClientAllocator().alloc();
    return handleFromClient(client.release());    
}

bool cc_mqtt5_##NAME##client_handle_is_valid(CC_Mqtt5ClientHandle client)
{
    return client != nullptr;
}

void cc_mqtt5_##NAME##client_free(CC_Mqtt5ClientHandle client)
{
    getClientAllocator().free(clientFromHandle(client));
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_init(CC_Mqtt5ClientHandle client)
{
    return clientFromHandle(client)->init();
}

void cc_mqtt5_##NAME##client_tick(CC_Mqtt5ClientHandle client, unsigned ms)
{
    clientFromHandle(client)->tick(ms);
}

unsigned cc_mqtt5_##NAME##client_process_data(CC_Mqtt5ClientHandle client, const unsigned char* buf, unsigned bufLen)
{
    return clientFromHandle(client)->processData(buf, bufLen);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_set_default_op_timeout(CC_Mqtt5ClientHandle client, unsigned ms)
{
    if (!cc_mqtt5_##NAME##client_handle_is_valid(client) || (ms = 0U)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    clientFromHandle(client)->state().m_opTimeoutMs = ms;
    return CC_Mqtt5ErrorCode_Success;
}

unsigned cc_mqtt5_##NAME##client_get_default_op_timeout(CC_Mqtt5ClientHandle client)
{
    if (!cc_mqtt5_##NAME##client_handle_is_valid(client)) {
        return 0U;
    }

    return clientFromHandle(client)->state().m_opTimeoutMs;
}

void cc_mqtt5_##NAME##client_init_user_prop(CC_Mqtt5UserProp* prop)
{
    *prop = CC_Mqtt5UserProp();
}

CC_Mqtt5ConnectHandle cc_mqtt5_##NAME##client_connect_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec)
{
    if (!cc_mqtt5_##NAME##client_handle_is_valid(handle)) {
        if (ec != nullptr) {
            *ec = CC_Mqtt5ErrorCode_BadParam;
        }        
        return CC_Mqtt5ConnectHandle();
    }

    return handleFromConnectOp(clientFromHandle(handle)->connectPrepare(ec));
}

bool cc_mqtt5_##NAME##client_connect_handle_is_valid(CC_Mqtt5ConnectHandle handle)
{
    return handle != nullptr;
}

void cc_mqtt5_##NAME##client_connect_init_config_basic(CC_Mqtt5ConnectBasicConfig* config)
{
    *config = CC_Mqtt5ConnectBasicConfig();
    config->m_keepAlive = cc_mqtt5_client::State::DefaultKeepAlive;
}

void cc_mqtt5_##NAME##client_connect_init_config_will(CC_Mqtt5ConnectWillConfig* config)
{
    *config = CC_Mqtt5ConnectWillConfig();
}

void cc_mqtt5_##NAME##client_connect_init_config_extra(CC_Mqtt5ConnectExtraConfig* config)
{
    *config = CC_Mqtt5ConnectExtraConfig();

    if constexpr (cc_mqtt5_client::Config::ReceiveMaxLimit > 0U) {
        config->m_receiveMaximum = (cc_mqtt5_client::Config::ReceiveMaxLimit - 1U);
    }

    if constexpr (cc_mqtt5_client::Config::HasTopicAliases) {
        config->m_topicAliasMaximum = cc_mqtt5_client::Config::TopicAliasesLimit;
    }
}

void cc_mqtt5_##NAME##client_connect_init_config_auth(CC_Mqtt5ConnectAuthConfig* config)
{
    *config = CC_Mqtt5ConnectAuthConfig();
}

void cc_mqtt5_##NAME##client_connect_init_auth_info(CC_Mqtt5AuthInfo* info)
{
    *info = CC_Mqtt5AuthInfo();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_basic(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5ConnectBasicConfig* config)
{
    if ((!cc_mqtt5_##NAME##client_connect_handle_is_valid(handle)) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    return connectOpFromHandle(handle)->configBasic(*config);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_will(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5ConnectWillConfig* config)
{
    if ((!cc_mqtt5_##NAME##client_connect_handle_is_valid(handle)) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return connectOpFromHandle(handle)->configWill(*config);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_extra(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5ConnectExtraConfig* config)
{
    if ((!cc_mqtt5_##NAME##client_connect_handle_is_valid(handle)) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }        

    return connectOpFromHandle(handle)->configExtra(*config);    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_config_auth(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5ConnectAuthConfig* config)
{
    if ((!cc_mqtt5_##NAME##client_connect_handle_is_valid(handle)) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }        

    return connectOpFromHandle(handle)->configAuth(*config);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_add_user_prop(CC_Mqtt5ConnectHandle handle, const CC_Mqtt5UserProp* prop)
{
    if ((!cc_mqtt5_##NAME##client_connect_handle_is_valid(handle)) || (prop == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }        

    return connectOpFromHandle(handle)->addUserProp(*prop);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_connect_send(CC_Mqtt5ConnectHandle handle, CC_Mqtt5ConnectCompleteCb cb, void* cbData)
{
    if (!cc_mqtt5_##NAME##client_connect_handle_is_valid(handle)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }

    return connectOpFromHandle(handle)->send(cb, cbData);
}

CC_Mqtt5DisconnectHandle cc_mqtt5_##NAME##client_disconnect_prepare(CC_Mqtt5ClientHandle handle, CC_Mqtt5ErrorCode* ec)
{
    if (!cc_mqtt5_##NAME##client_handle_is_valid(handle)) {
        if (ec != nullptr) {
            *ec = CC_Mqtt5ErrorCode_BadParam;
        }        
        return CC_Mqtt5DisconnectHandle();
    }

    return handleFromDisconnectOp(clientFromHandle(handle)->disconnectPrepare(ec));    
}

bool cc_mqtt5_##NAME##client_disconnect_handle_is_valid(CC_Mqtt5DisconnectHandle handle)
{
    return handle != nullptr;
}

void cc_mqtt5_##NAME##client_disconnect_init_config(CC_Mqtt5DisconnectConfig* config)
{
    *config = CC_Mqtt5DisconnectConfig();
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_diconnect_config(CC_Mqtt5DisconnectHandle handle, const CC_Mqtt5DisconnectConfig* config)
{
    if ((!cc_mqtt5_##NAME##client_disconnect_handle_is_valid(handle)) || (config == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }    

    return disconnectOpFromHandle(handle)->configBasic(*config);
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_disconnect_add_user_prop(CC_Mqtt5DisconnectHandle handle, const CC_Mqtt5UserProp* prop)
{
    if ((!cc_mqtt5_##NAME##client_disconnect_handle_is_valid(handle)) || (prop == nullptr)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }        

    return disconnectOpFromHandle(handle)->addUserProp(*prop);    
}

CC_Mqtt5ErrorCode cc_mqtt5_##NAME##client_disconnect_send(CC_Mqtt5DisconnectHandle handle)
{
    if (!cc_mqtt5_##NAME##client_disconnect_handle_is_valid(handle)) {
        return CC_Mqtt5ErrorCode_BadParam;
    }  

    return disconnectOpFromHandle(handle)->send();
}

// --------------------- Callbacks ---------------------

void cc_mqtt5_##NAME##client_set_next_tick_program_callback(
    CC_Mqtt5ClientHandle client,
    CC_Mqtt5NextTickProgramCb cb,
    void* data)
{
    clientFromHandle(client)->setNextTickProgramCallback(cb, data);
}

void cc_mqtt5_##NAME##client_set_cancel_next_tick_wait_callback(
    CC_Mqtt5ClientHandle client,
    CC_Mqtt5CancelNextTickWaitCb cb,
    void* data)
{
    clientFromHandle(client)->setCancelNextTickWaitCallback(cb, data);
}

void cc_mqtt5_##NAME##client_set_send_output_data_callback(
    CC_Mqtt5ClientHandle client,
    CC_Mqtt5SendOutputDataCb cb,
    void* data)
{
    clientFromHandle(client)->setSendOutputDataCallback(cb, data);
}

void cc_mqtt5_##NAME##client_set_broker_disconnect_report_callback(
    CC_Mqtt5ClientHandle client,
    CC_Mqtt5BrokerDisconnectReportCb cb,
    void* data)
{
    clientFromHandle(client)->setBrokerDisconnectReportCallback(cb, data);
}
