#include "UnitTestCommonBase.h"
#include "UnitTestDefs.h"
#include "UnitTestPropsHandler.h"
#include "UnitTestProtocolDefs.h"

#include "client.h"

#include <cxxtest/TestSuite.h>

class ConnectUnitTestSuite : public CxxTest::TestSuite, public UnitTestCommonBase
{
public:
    void test1();

private:
    virtual void setUp() override
    {
        unitTestSetUp();
    }

    virtual void tearDown() override
    {
        unitTestTearDown();
    }
};

void ConnectUnitTestSuite::test1()
{
    auto* client = unitTestAllocClient();
    TS_ASSERT_DIFFERS(client, nullptr);
    TS_ASSERT(unitTestCheckNoTicks());

    auto* connect = cc_mqtt5_client_connect_prepare(client, nullptr);
    TS_ASSERT_DIFFERS(connect, nullptr);

    auto connectBasicConfig = CC_Mqtt5ConnectBasicConfig();
    cc_mqtt5_client_connect_init_config_basic(&connectBasicConfig);

    const std::string ClientId("bla");
    const unsigned KeepAlive = 50;
    connectBasicConfig.m_clientId = ClientId.c_str();
    connectBasicConfig.m_keepAlive = KeepAlive;
    connectBasicConfig.m_cleanStart = true;
    auto ec = cc_mqtt5_client_connect_config_basic(connect, &connectBasicConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);
    ec = unitTestSendConnect(connect);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Connect);
    auto* connectMsg = dynamic_cast<UnitTestConnectMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(connectMsg, nullptr);
    TS_ASSERT_EQUALS(connectMsg->field_clientId().value(), ClientId);
    TS_ASSERT_EQUALS(connectMsg->field_keepAlive().value(), KeepAlive);
    TS_ASSERT(connectMsg->field_flags().field_low().getBitValue_cleanStart());
    TS_ASSERT(connectMsg->field_willProperties().isMissing());
    TS_ASSERT(connectMsg->field_properties().value().empty());
    TS_ASSERT(!unitTestIsConnectComplete());

    auto& tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq.m_requested, UnitTestDefaultOpTimeoutMs);
}
