#include "UnitTestDefaultBase.h"
#include "UnitTestPropsHandler.h"
#include "UnitTestProtocolDefs.h"

#include "client.h"

#include <cxxtest/TestSuite.h>

class UnitTestClient : public CxxTest::TestSuite, public UnitTestDefaultBase
{
public:
    void test1();
    void test2();


private:
    virtual void setUp() override
    {
        m_tickReqs.clear();
        unitTestSetUp();
    }

    virtual void tearDown() override
    {
        unitTestTearDown();
    }


    static void brokerDisconnectedCb([[maybe_unused]] void* obj, [[maybe_unused]] const CC_Mqtt5DisconnectInfo* info)
    {
    }

    static void messageReceivedCb([[maybe_unused]] void* obj, [[maybe_unused]] const CC_Mqtt5MessageInfo* info)
    {
    }

    static void sendOutputDataCb([[maybe_unused]] void* obj, [[maybe_unused]] const unsigned char* buf, [[maybe_unused]] unsigned bufLen)
    {
    }

    static void programNextTickCb(void* obj, unsigned duration)
    {
        auto* realObj = reinterpret_cast<UnitTestClient*>(obj);
        TS_ASSERT(realObj->m_tickReqs.empty());
        realObj->m_tickReqs.push_back(duration);
    }

    static unsigned cancelNextTickWaitCb(void* obj) {
        static_cast<void>(obj);
        TS_ASSERT(false);
        return 0U;
    }

    std::vector<unsigned> m_tickReqs;

};

void UnitTestClient::test1()
{
    auto client = unitTestAlloc();
    TS_ASSERT(client);

    auto ec = unitTestInit(client.get());
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);

    unitTestSetBrokerDisconnectReportCb(client.get(), &UnitTestClient::brokerDisconnectedCb, this);
    ec = unitTestInit(client.get());
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);

    unitTestSetSendOutputDataCb(client.get(), &UnitTestClient::sendOutputDataCb, this);
    ec = unitTestInit(client.get());
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);

    unitTestSetMessageReceivedReportCb(client.get(), &UnitTestClient::messageReceivedCb, this);
    ec = unitTestInit(client.get());
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    
}

void UnitTestClient::test2()
{
    auto client = unitTestAlloc();
    TS_ASSERT_DIFFERS(client.get(), nullptr);

    unitTestSetBrokerDisconnectReportCb(client.get(), &UnitTestClient::brokerDisconnectedCb, this);
    unitTestSetMessageReceivedReportCb(client.get(), &UnitTestClient::messageReceivedCb, this);
    unitTestSetSendOutputDataCb(client.get(), &UnitTestClient::sendOutputDataCb, this);
    unitTestSetNextTickProgramCb(client.get(), &UnitTestClient::programNextTickCb, this);

    auto ec = unitTestInit(client.get());
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_BadParam);    

    unitTestSetCancelNextTickWaitCb(client.get(), &UnitTestClient::cancelNextTickWaitCb, this);
    ec = unitTestInit(client.get());
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    

}
