#include "UnitTestDefaultBase.h"
#include "UnitTestPropsHandler.h"
#include "UnitTestProtocolDefs.h"

#include "client.h"

#include <cxxtest/TestSuite.h>

class UnitTestReauth : public CxxTest::TestSuite, public UnitTestDefaultBase
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();

private:
    virtual void setUp() override
    {
        unitTestSetUp();
    }

    virtual void tearDown() override
    {
        unitTestTearDown();
    }
};

void UnitTestReauth::test1()
{
    // Simple reauth from client
    // [MQTT-4.12.1-1]
    auto* client = unitTestAllocAndInitClient(true);
    TS_ASSERT_DIFFERS(client, nullptr);

    auto basicConfig = CC_Mqtt5ConnectBasicConfig();
    unitTestConnectInitConfigBasic(&basicConfig);
    basicConfig.m_clientId = __FUNCTION__;
    basicConfig.m_cleanStart = true;

    const std::string ConnectAuthMethod = "AuthMethod";
    const UnitTestData ConnectAuthData = {0x1, 0x2, 0x3, 0x5, 0xa};

    auto extraConfig = CC_Mqtt5ConnectExtraConfig();
    unitTestConnectInitConfigExtra(&extraConfig);
    extraConfig.m_requestProblemInfo = true;     

    auto connectAuthConfig = CC_Mqtt5AuthConfig();
    unitTestConnectInitConfigAuth(&connectAuthConfig);
    connectAuthConfig.m_authMethod = ConnectAuthMethod.c_str();
    connectAuthConfig.m_authData = &ConnectAuthData[0];
    connectAuthConfig.m_authDataLen = static_cast<decltype(connectAuthConfig.m_authDataLen)>(ConnectAuthData.size());

    unitTestPerformConnect(client, &basicConfig, nullptr, &extraConfig, &connectAuthConfig, nullptr);
    TS_ASSERT(unitTestIsConnected(client));
    TS_ASSERT(!unitTestHasSentMessage());

    auto* reauth = unitTestReauthPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(reauth, nullptr);

    const UnitTestData ReAuthData = {0x1, 0x2, 0x3, 0x5, 0x6};
    auto ec = unitTestConfigReauth(reauth, std::string(), ReAuthData);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    

    const std::string UserPropKey1 = "key1";
    const std::string UserPropVal1 = "val1";
    auto prop1 = CC_Mqtt5UserProp();
    prop1.m_key = UserPropKey1.c_str();
    prop1.m_value = UserPropVal1.c_str();
    ec = unitTestReauthAddUserProp(reauth, &prop1);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    

    ec = unitTestSendReauth(reauth);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Auth);
    auto* authMsg = dynamic_cast<UnitTestAuthMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(authMsg, nullptr);
    TS_ASSERT(authMsg->field_reasonCode().doesExist());
    TS_ASSERT_EQUALS(authMsg->field_reasonCode().field().value(), UnitTestAuthMsg::Field_reasonCode::Field::ValueType::ReAuth);
    TS_ASSERT(authMsg->field_properties().doesExist());

    UnitTestPropsHandler propsHandler;
    for (auto& p : authMsg->field_properties().field().value()) {
        p.currentFieldExec(propsHandler);
    }

    TS_ASSERT_DIFFERS(propsHandler.m_authMethod, nullptr);
    TS_ASSERT_EQUALS(propsHandler.m_authMethod->field_value().value(), ConnectAuthMethod);

    TS_ASSERT_DIFFERS(propsHandler.m_authData, nullptr);
    TS_ASSERT_EQUALS(propsHandler.m_authData->field_value().value(), ReAuthData);    

    TS_ASSERT_EQUALS(propsHandler.m_userProps.size(), 1U);    
    TS_ASSERT_EQUALS(propsHandler.m_userProps[0]->field_value().field_first().value(), UserPropKey1);    
    TS_ASSERT_EQUALS(propsHandler.m_userProps[0]->field_value().field_second().value(), UserPropVal1);    

    TS_ASSERT(!unitTestIsReauthComplete());

    const UnitTestData AuthData = {0x11, 0x22, 0x33, 0x44};
    const std::string ReasonStr("ReasonStr");
    UnitTestAuthInfo authOutInfo;
    authOutInfo.m_authData = AuthData;
    authOutInfo.m_reasonStr = ReasonStr;
    authOutInfo.m_userProps.push_back({UserPropKey1, UserPropVal1});
    unitTestAddOutAuth(authOutInfo);    
    
    UnitTestAuthMsg brokerAuth;
    brokerAuth.field_reasonCode().setExists();
    brokerAuth.field_reasonCode().field().value() = UnitTestAuthMsg::Field_reasonCode::Field::ValueType::ContinueAuth;
    brokerAuth.field_properties().setExists();
    auto& authPropsVec = brokerAuth.field_properties().field().value();

    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_authMethod();
        field.field_value().setValue(ConnectAuthMethod);
    }

    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_authData();
        comms::util::assign(field.field_value().value(), AuthData.begin(), AuthData.end());
    }      

    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_userProperty();
        auto& propValue = field.field_value();
        propValue.field_first().value() = UserPropKey1;
        propValue.field_second().value() = UserPropVal1;
    }   

    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_reasonStr();
        comms::util::assign(field.field_value().value(), ReasonStr.begin(), ReasonStr.end());
    }            

    unitTestReceiveMessage(brokerAuth);
    TS_ASSERT(unitTestHasInAuthInfo()); 
    auto& inAuthInfo = unitTestInAuthInfo();
    TS_ASSERT_EQUALS(inAuthInfo.m_authData, AuthData);
    TS_ASSERT_EQUALS(inAuthInfo.m_reasonStr, ReasonStr);
    TS_ASSERT_EQUALS(inAuthInfo.m_userProps.size(), 1U);
    TS_ASSERT_EQUALS(inAuthInfo.m_userProps[0].m_key, UserPropKey1);
    TS_ASSERT_EQUALS(inAuthInfo.m_userProps[0].m_value, UserPropVal1);
    unitTestPopInAuthInfo();
    unitTestPopOutAuthInfo();
    TS_ASSERT(!unitTestIsReauthComplete());

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Auth);
    authMsg = dynamic_cast<UnitTestAuthMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(authMsg, nullptr);
    TS_ASSERT(authMsg->field_reasonCode().doesExist());
    TS_ASSERT_EQUALS(authMsg->field_reasonCode().field().value(), UnitTestAuthMsg::Field_reasonCode::Field::ValueType::ContinueAuth);
    TS_ASSERT(authMsg->field_properties().doesExist());

    UnitTestPropsHandler propsHandler2;
    for (auto& p : authMsg->field_properties().field().value()) {
        p.currentFieldExec(propsHandler2);
    }

    TS_ASSERT_DIFFERS(propsHandler2.m_authMethod, nullptr);
    TS_ASSERT_EQUALS(propsHandler2.m_authMethod->field_value().value(), ConnectAuthMethod);

    TS_ASSERT_DIFFERS(propsHandler2.m_authData, nullptr);
    TS_ASSERT_EQUALS(propsHandler2.m_authData->field_value().value(), AuthData);   

    TS_ASSERT_DIFFERS(propsHandler2.m_reasonStr, nullptr);
    TS_ASSERT_EQUALS(propsHandler2.m_reasonStr->field_value().value(), ReasonStr);           

    TS_ASSERT_EQUALS(propsHandler2.m_userProps.size(), 1U);    
    TS_ASSERT_EQUALS(propsHandler2.m_userProps[0]->field_value().field_first().value(), UserPropKey1);    
    TS_ASSERT_EQUALS(propsHandler2.m_userProps[0]->field_value().field_second().value(), UserPropVal1);    


    brokerAuth.field_reasonCode().field().value() = UnitTestAuthMsg::Field_reasonCode::Field::ValueType::Success;
    unitTestReceiveMessage(brokerAuth);
    TS_ASSERT(unitTestIsReauthComplete());
    
    auto& respInfo = unitTestReauthResponseInfo();
    TS_ASSERT_EQUALS(respInfo.m_status, CC_Mqtt5AsyncOpStatus_Complete);
    TS_ASSERT_EQUALS(respInfo.m_response.m_authData, AuthData);
    TS_ASSERT_EQUALS(respInfo.m_response.m_reasonStr, ReasonStr);
    TS_ASSERT_EQUALS(respInfo.m_response.m_userProps.size(), 1U);
    TS_ASSERT_EQUALS(respInfo.m_response.m_userProps[0].m_key, UserPropKey1);
    TS_ASSERT_EQUALS(respInfo.m_response.m_userProps[0].m_value, UserPropVal1);
    unitTestPopReauthResponseInfo();
}

void UnitTestReauth::test2()
{
    // Testing invalid reason code from broker
    // [MQTT-3.15.2-1]

    auto* client = unitTestAllocAndInitClient();
    TS_ASSERT_DIFFERS(client, nullptr);

    auto basicConfig = CC_Mqtt5ConnectBasicConfig();
    unitTestConnectInitConfigBasic(&basicConfig);
    basicConfig.m_clientId = __FUNCTION__;
    basicConfig.m_cleanStart = true;

    const std::string ConnectAuthMethod = "AuthMethod";
    const UnitTestData ConnectAuthData = {0x1, 0x2, 0x3, 0x5, 0xa};

    auto connectAuthConfig = CC_Mqtt5AuthConfig();
    unitTestConnectInitConfigAuth(&connectAuthConfig);
    connectAuthConfig.m_authMethod = ConnectAuthMethod.c_str();
    connectAuthConfig.m_authData = &ConnectAuthData[0];
    connectAuthConfig.m_authDataLen = static_cast<decltype(connectAuthConfig.m_authDataLen)>(ConnectAuthData.size());

    unitTestPerformConnect(client, &basicConfig, nullptr, nullptr, &connectAuthConfig, nullptr);
    TS_ASSERT(unitTestIsConnected(client));
    TS_ASSERT(!unitTestHasSentMessage());

    auto* reauth = unitTestReauthPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(reauth, nullptr);

    const UnitTestData ReAuthData = {0x1, 0x2, 0x3, 0x5, 0x6};
    unitTestConfigReauth(reauth, std::string(), ReAuthData);

    auto ec = unitTestSendReauth(reauth);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Auth);
    auto* authMsg = dynamic_cast<UnitTestAuthMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(authMsg, nullptr);
    TS_ASSERT(authMsg->field_reasonCode().doesExist());
    TS_ASSERT_EQUALS(authMsg->field_reasonCode().field().value(), UnitTestAuthMsg::Field_reasonCode::Field::ValueType::ReAuth);
    TS_ASSERT(authMsg->field_properties().doesExist());
    TS_ASSERT(!unitTestIsReauthComplete());

    const UnitTestData AuthData = {0x11, 0x22, 0x33, 0x44};
    
    UnitTestAuthMsg brokerAuth;
    brokerAuth.field_reasonCode().setExists();
    brokerAuth.field_reasonCode().field().value() = UnitTestAuthMsg::Field_reasonCode::Field::ValueType::GrantedQos1;
    brokerAuth.field_properties().setExists();
    auto& authPropsVec = brokerAuth.field_properties().field().value();

    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_authMethod();
        field.field_value().setValue(ConnectAuthMethod);
    }

    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_authData();
        comms::util::assign(field.field_value().value(), AuthData.begin(), AuthData.end());
    }      

    unitTestReceiveMessage(brokerAuth);
    TS_ASSERT(unitTestIsReauthComplete());
    auto& respInfo = unitTestReauthResponseInfo();
    TS_ASSERT_EQUALS(respInfo.m_status, CC_Mqtt5AsyncOpStatus_ProtocolError);
    unitTestPopReauthResponseInfo();    

    unitTestVerifyDisconnectSent(UnitTestDisconnectReason::ProtocolError);
    TS_ASSERT(unitTestIsDisconnected());    
}

void UnitTestReauth::test3()
{
    // Testing big reason string in AUTH.
    // [MQTT-3.15.2-2]

    auto* client = unitTestAllocAndInitClient();

    auto basicConfig = CC_Mqtt5ConnectBasicConfig();
    unitTestConnectInitConfigBasic(&basicConfig);
    basicConfig.m_clientId = __FUNCTION__;
    basicConfig.m_cleanStart = true;

    auto extraConfig = CC_Mqtt5ConnectExtraConfig();
    unitTestConnectInitConfigExtra(&extraConfig);
    extraConfig.m_requestProblemInfo = true;     

    const std::string ConnectAuthMethod = "AuthMethod";
    const UnitTestData ConnectAuthData = {0x1, 0x2, 0x3, 0x5, 0xa};
    auto connectAuthConfig = CC_Mqtt5AuthConfig();
    unitTestConnectInitConfigAuth(&connectAuthConfig);
    connectAuthConfig.m_authMethod = ConnectAuthMethod.c_str();
    connectAuthConfig.m_authData = &ConnectAuthData[0];
    connectAuthConfig.m_authDataLen = static_cast<decltype(connectAuthConfig.m_authDataLen)>(ConnectAuthData.size());    

    UnitTestConnectResponseConfig responseConfig;
    responseConfig.m_maxPacketSize = 200;
    unitTestPerformConnect(client, &basicConfig, nullptr, &extraConfig, &connectAuthConfig, &responseConfig);
    TS_ASSERT(unitTestIsConnected(client));    

    auto* reauth = unitTestReauthPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(reauth, nullptr);

    const UnitTestData ReAuthData = {0x1, 0x2, 0x3, 0x5, 0x6};
    auto ec = unitTestConfigReauth(reauth, std::string(), ReAuthData);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    

    ec = unitTestSendReauth(reauth);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);       

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Auth);
    auto* authMsg = dynamic_cast<UnitTestAuthMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(authMsg, nullptr);
    TS_ASSERT(authMsg->field_reasonCode().doesExist());
    TS_ASSERT_EQUALS(authMsg->field_reasonCode().field().value(), UnitTestAuthMsg::Field_reasonCode::Field::ValueType::ReAuth);

    const UnitTestData AuthData = {0x11, 0x22, 0x33, 0x44};
    const std::string ReasonStr(200, 'a');
    UnitTestAuthInfo authOutInfo;
    authOutInfo.m_authData = AuthData;
    authOutInfo.m_reasonStr = ReasonStr;
    unitTestAddOutAuth(authOutInfo);    
    
    UnitTestAuthMsg brokerAuth;
    brokerAuth.field_reasonCode().setExists();
    brokerAuth.field_reasonCode().field().value() = UnitTestAuthMsg::Field_reasonCode::Field::ValueType::ContinueAuth;
    brokerAuth.field_properties().setExists();
    auto& authPropsVec = brokerAuth.field_properties().field().value();
    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_authMethod();
        field.field_value().setValue(ConnectAuthMethod);
    }

    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_authData();
        comms::util::assign(field.field_value().value(), AuthData.begin(), AuthData.end());
    }      

    unitTestReceiveMessage(brokerAuth);    

    TS_ASSERT(unitTestIsReauthComplete());
    auto& respInfo = unitTestReauthResponseInfo();
    TS_ASSERT_EQUALS(respInfo.m_status, CC_Mqtt5AsyncOpStatus_OutOfMemory);
    unitTestPopReauthResponseInfo();    

    unitTestVerifyDisconnectSent(UnitTestDisconnectReason::UnspecifiedError);
    TS_ASSERT(unitTestIsDisconnected());        
}


void UnitTestReauth::test4()
{
    // Testing big user properties strings in AUTH.
    // [MQTT-3.15.2-3]

    auto* client = unitTestAllocAndInitClient();

    auto basicConfig = CC_Mqtt5ConnectBasicConfig();
    unitTestConnectInitConfigBasic(&basicConfig);
    basicConfig.m_clientId = __FUNCTION__;
    basicConfig.m_cleanStart = true;

    auto extraConfig = CC_Mqtt5ConnectExtraConfig();
    unitTestConnectInitConfigExtra(&extraConfig);
    extraConfig.m_requestProblemInfo = true;     

    const std::string ConnectAuthMethod = "AuthMethod";
    const UnitTestData ConnectAuthData = {0x1, 0x2, 0x3, 0x5, 0xa};
    auto connectAuthConfig = CC_Mqtt5AuthConfig();
    unitTestConnectInitConfigAuth(&connectAuthConfig);
    connectAuthConfig.m_authMethod = ConnectAuthMethod.c_str();
    connectAuthConfig.m_authData = &ConnectAuthData[0];
    connectAuthConfig.m_authDataLen = static_cast<decltype(connectAuthConfig.m_authDataLen)>(ConnectAuthData.size());    

    UnitTestConnectResponseConfig responseConfig;
    responseConfig.m_maxPacketSize = 200;
    unitTestPerformConnect(client, &basicConfig, nullptr, &extraConfig, &connectAuthConfig, &responseConfig);
    TS_ASSERT(unitTestIsConnected(client));    

    auto* reauth = unitTestReauthPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(reauth, nullptr);

    const UnitTestData ReAuthData = {0x1, 0x2, 0x3, 0x5, 0x6};
    auto ec = unitTestConfigReauth(reauth, std::string(), ReAuthData);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    

    ec = unitTestSendReauth(reauth);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);       

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Auth);
    auto* authMsg = dynamic_cast<UnitTestAuthMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(authMsg, nullptr);
    TS_ASSERT(authMsg->field_reasonCode().doesExist());
    TS_ASSERT_EQUALS(authMsg->field_reasonCode().field().value(), UnitTestAuthMsg::Field_reasonCode::Field::ValueType::ReAuth);

    const UnitTestData AuthData = {0x11, 0x22, 0x33, 0x44};
    const std::string UserPropKey(100, 'a');
    const std::string UserPropVal(100, 'a');
    UnitTestAuthInfo authOutInfo;
    authOutInfo.m_authData = AuthData;
    authOutInfo.m_userProps.push_back({UserPropKey, UserPropVal});
    unitTestAddOutAuth(authOutInfo);    
    
    UnitTestAuthMsg brokerAuth;
    brokerAuth.field_reasonCode().setExists();
    brokerAuth.field_reasonCode().field().value() = UnitTestAuthMsg::Field_reasonCode::Field::ValueType::ContinueAuth;
    brokerAuth.field_properties().setExists();
    auto& authPropsVec = brokerAuth.field_properties().field().value();
    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_authMethod();
        field.field_value().setValue(ConnectAuthMethod);
    }

    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_authData();
        comms::util::assign(field.field_value().value(), AuthData.begin(), AuthData.end());
    }      

    unitTestReceiveMessage(brokerAuth);    

    TS_ASSERT(unitTestIsReauthComplete());
    auto& respInfo = unitTestReauthResponseInfo();
    TS_ASSERT_EQUALS(respInfo.m_status, CC_Mqtt5AsyncOpStatus_OutOfMemory);
    unitTestPopReauthResponseInfo();    

    unitTestVerifyDisconnectSent(UnitTestDisconnectReason::UnspecifiedError);
    TS_ASSERT(unitTestIsDisconnected());        
}

void UnitTestReauth::test5()
{
    // Testing inability to perfrom reauth operation when connect didn't have auth
    // [MQTT-4.12.0-7]

    auto* client = unitTestAllocAndInitClient();
    TS_ASSERT_DIFFERS(client, nullptr);

    unitTestPerformBasicConnect(client, __FUNCTION__);

    auto ec = CC_Mqtt5ErrorCode_Success;
    auto* reauth = unitTestReauthPrepare(client, &ec);
    TS_ASSERT_EQUALS(reauth, nullptr);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_NotAuthenticated);
}

void UnitTestReauth::test6()
{
    // Testing AUTH rejection by the client.
    // [MQTT-4.12.1-2]
    auto* client = unitTestAllocAndInitClient();
    TS_ASSERT_DIFFERS(client, nullptr);

    auto basicConfig = CC_Mqtt5ConnectBasicConfig();
    unitTestConnectInitConfigBasic(&basicConfig);
    basicConfig.m_clientId = __FUNCTION__;
    basicConfig.m_cleanStart = true;

    const std::string ConnectAuthMethod = "AuthMethod";
    const UnitTestData ConnectAuthData = {0x1, 0x2, 0x3, 0x5, 0xa};

    auto connectAuthConfig = CC_Mqtt5AuthConfig();
    unitTestConnectInitConfigAuth(&connectAuthConfig);
    connectAuthConfig.m_authMethod = ConnectAuthMethod.c_str();
    connectAuthConfig.m_authData = &ConnectAuthData[0];
    connectAuthConfig.m_authDataLen = static_cast<decltype(connectAuthConfig.m_authDataLen)>(ConnectAuthData.size());

    unitTestPerformConnect(client, &basicConfig, nullptr, nullptr, &connectAuthConfig, nullptr);
    TS_ASSERT(unitTestIsConnected(client));
    TS_ASSERT(!unitTestHasSentMessage());

    auto* reauth = unitTestReauthPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(reauth, nullptr);

    const UnitTestData ReAuthData = {0x1, 0x2, 0x3, 0x5, 0x6};
    auto ec = unitTestConfigReauth(reauth, std::string(), ReAuthData);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    

    ec = unitTestSendReauth(reauth);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Auth);
    auto* authMsg = dynamic_cast<UnitTestAuthMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(authMsg, nullptr);
    TS_ASSERT(authMsg->field_reasonCode().doesExist());
    TS_ASSERT_EQUALS(authMsg->field_reasonCode().field().value(), UnitTestAuthMsg::Field_reasonCode::Field::ValueType::ReAuth);
    TS_ASSERT(authMsg->field_properties().doesExist());

    TS_ASSERT(!unitTestIsReauthComplete());

    const UnitTestData BrokerAuthData = {0x1, 0x2, 0x3, 0x5};
    UnitTestAuthMsg brokerAuth;
    brokerAuth.field_reasonCode().setExists();
    brokerAuth.field_reasonCode().field().value() = UnitTestAuthMsg::Field_reasonCode::Field::ValueType::ContinueAuth;
    brokerAuth.field_properties().setExists();
    auto& authPropsVec = brokerAuth.field_properties().field().value();
    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_authMethod();
        field.field_value().setValue(ConnectAuthMethod);
    }

    {
        authPropsVec.resize(authPropsVec.size() + 1U);
        auto& field = authPropsVec.back().initField_authData();
        comms::util::assign(field.field_value().value(), BrokerAuthData.begin(), BrokerAuthData.end());
    }      

    unitTestReceiveMessage(brokerAuth);
    TS_ASSERT(unitTestHasInAuthInfo()); 
    auto& inAuthInfo = unitTestInAuthInfo();
    TS_ASSERT_EQUALS(inAuthInfo.m_authData, BrokerAuthData);
    unitTestPopInAuthInfo();

    TS_ASSERT(unitTestIsReauthComplete());
    
    auto& respInfo = unitTestReauthResponseInfo();
    TS_ASSERT_EQUALS(respInfo.m_status, CC_Mqtt5AsyncOpStatus_Aborted);
    unitTestPopReauthResponseInfo();

    unitTestVerifyDisconnectSent(UnitTestDisconnectReason::NotAuthorized);
    TS_ASSERT(unitTestIsDisconnected());            
}

void UnitTestReauth::test7()
{
    // Testing AUTH rejection by the broker.
    // [MQTT-4.12.1-2]
    auto* client = unitTestAllocAndInitClient(true);
    TS_ASSERT_DIFFERS(client, nullptr);

    auto basicConfig = CC_Mqtt5ConnectBasicConfig();
    unitTestConnectInitConfigBasic(&basicConfig);
    basicConfig.m_clientId = __FUNCTION__;
    basicConfig.m_cleanStart = true;

    const std::string ConnectAuthMethod = "AuthMethod";
    const UnitTestData ConnectAuthData = {0x1, 0x2, 0x3, 0x5, 0xa};

    auto connectAuthConfig = CC_Mqtt5AuthConfig();
    unitTestConnectInitConfigAuth(&connectAuthConfig);
    connectAuthConfig.m_authMethod = ConnectAuthMethod.c_str();
    connectAuthConfig.m_authData = &ConnectAuthData[0];
    connectAuthConfig.m_authDataLen = static_cast<decltype(connectAuthConfig.m_authDataLen)>(ConnectAuthData.size());

    unitTestPerformConnect(client, &basicConfig, nullptr, nullptr, &connectAuthConfig, nullptr);
    TS_ASSERT(unitTestIsConnected(client));
    TS_ASSERT(!unitTestHasSentMessage());

    auto* reauth = unitTestReauthPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(reauth, nullptr);

    const UnitTestData ReAuthData = {0x1, 0x2, 0x3, 0x5, 0x6};
    auto ec = unitTestConfigReauth(reauth, std::string(), ReAuthData);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    

    ec = unitTestSendReauth(reauth);
    TS_ASSERT_EQUALS(ec, CC_Mqtt5ErrorCode_Success);    

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt5::MsgId_Auth);
    auto* authMsg = dynamic_cast<UnitTestAuthMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(authMsg, nullptr);
    TS_ASSERT(authMsg->field_reasonCode().doesExist());
    TS_ASSERT_EQUALS(authMsg->field_reasonCode().field().value(), UnitTestAuthMsg::Field_reasonCode::Field::ValueType::ReAuth);
    TS_ASSERT(authMsg->field_properties().doesExist());

    TS_ASSERT(!unitTestIsReauthComplete());    

    UnitTestDisconnectMsg disconnectMsg;
    disconnectMsg.field_reasonCode().setExists();
    disconnectMsg.field_reasonCode().field().value() = UnitTestDisconnectMsg::Field_reasonCode::Field::ValueType::NotAuthorized;
    unitTestReceiveMessage(disconnectMsg);

    TS_ASSERT(unitTestIsReauthComplete());
    // auto& respInfo = unitTestReauthResponseInfo();
    // TS_ASSERT_EQUALS(respInfo.m_status, CC_Mqtt5AsyncOpStatus_BrokerDisconnected);
    // unitTestPopReauthResponseInfo();
    // TS_ASSERT(unitTestIsDisconnected());                      
}